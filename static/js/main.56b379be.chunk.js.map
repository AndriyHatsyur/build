{"version":3,"sources":["providers/ModalProvider.js","components/Layouts.js","providers/UserProvider.js","components/AppMenu.js","components/MainLayout.js","pages/price/PriceTable/priceTypes.js","pages/price/PriceTable/priceTableUtils.js","components/Form.js","pages/batchOrder/form/ProductItems.js","pages/batchOrder/form/OrderForm.js","pages/batchOrder/form/AddOrderForm.js","pages/batchOrder/form/UpdateOrderForm.js","components/Button.js","hook/useCinfirmModal.js","pages/batchOrder/form/DeleteOrderBtn.js","components/ProductsOrderTable.js","pages/batchOrder/BatchOrderTable.js","pages/dropBuyer/DeleteDropBuyerBtn.js","pages/dropBuyer/dropBuyerForm/DropBuyerForm.js","pages/dropBuyer/dropBuyerForm/AddDropBuyerForm.js","pages/dropBuyer/dropBuyerForm/EditDropBuyerForm.js","pages/dropBuyer/DropBuyerTable.js","pages/batchOrders/from/DropBuyerSelect.js","pages/batchOrders/from/BatchOrderForm.js","pages/batchOrders/from/AddBatchOrdersForm.js","pages/batchOrders/from/EditBatchOrdersForm.js","pages/batchOrders/DeleteBatchBtn.js","pages/batchOrders/BatchOrdersTable.js","pages/batchOrders/BatchOrdersPage.js","components/UpdateSettingsForm.js","pages/price/ProductForm/ProductForm.js","pages/price/ProductForm/utils.js","pages/price/ProductForm/AddProductForm.js","pages/price/ProductForm/EditProductForm.js","components/ProductShortTable.js","pages/price/ProductSetForm.js/ProductSetForm.js","pages/price/ProductSetForm.js/AddProductSetForm.js","pages/price/ProductSetForm.js/EditProductSetForm.js","pages/price/UpdatePrice/UpdatePrice.js","pages/price/UpdatePrice/UpdatePriceExcel.js","pages/price/PriceTable/DeletePriceBtn.js","pages/price/PriceTable/ExcelExport.js","pages/price/PriceTable/textFilter.js","pages/price/PriceTable/PriceTable.js","pages/category/CategoryForm/CategoryForm.js","pages/category/CategoryForm/utils.js","pages/category/CategoryForm/EditCategoryForm.js","pages/category/CategoryForm/AddCategoryForm.js","pages/category/CategoryTable/DeleteCategoryBtn.js","pages/category/CategoryTable/CategoryTable.js","pages/login/LoginForm.js","pages/login/LoginPage.js","pages/OwnOrders/form/ProductItems.js","pages/OwnOrders/form/OwnOrderForm.js","pages/OwnOrders/form/AddOwnOrderForm.js","pages/OwnOrders/form/UpdateOwnOrdersForm.js","pages/OwnOrders/form/DeleteOwnOrderBtn.js","pages/OwnOrders/OwnOrdersPage.js","pages/PublicBatchOrder.js","pages/PublicBatchOrders.js","pages/StatisticPage.js","routes/config.js","pages/price/PricePage.js","pages/category/CategoryPage.js","pages/dropBuyer/DropBuyerPage.js","pages/batchOrders/BatchOrdersBuyerPage.js","pages/batchOrder/BatchOrderPage.js","pages/price/PublicPricePage.js","routes/AppRouter.js","App.js","providers/ApolloClientProvider.js","index.js"],"names":["ModalContext","React","createContext","ModalProvider","children","useState","isModalVisible","setIsModalVisible","modalConfig","setModalConfig","modalContent","setModalContent","showModal","content","title","width","handleCancel","useModal","Provider","value","visible","onCancel","footer","useModalContext","useContext","Wrapper","styled","div","EmptyLayout","UserContext","UserProvider","user","setUser","userLogin","userLogout","localStorage","removeItem","window","location","reload","useUser","useUserContext","ExitBtn","UserNameInfo","span","AppMenu","useLocation","pathname","current","setCurrent","navigate","useNavigate","onClick","e","key","selectedKeys","mode","theme","Item","routes","home","category","dropBuyer","batchOrders","statistic","ownOrders","style","marginLeft","username","login","ME_QUERY","gql","priceTypes","EMPTT_VALUE","DROPSHIPPING_MARKUP","getItem","roundToKopeck","Math","round","Number","EPSILON","calculateMarkup","R","markup","price","to","findProductSubCategory","undefined","commonProductFields","_id","nomenclature","article","categoryName","subcategoryName","preparepProductData","wholesalePrice","count","dropPrice","parseFloat","sellingPrice","type","getProducts","preparedProductSetData","a","b","getCategoriesOptions","categories","subCategories","getCategoryFiletrOptions","text","requiredRule","required","message","SubmitBtnItem","htmlType","MarkupInputItem","label","name","min","ArticleInputItem","rules","SEARCH_PRODUCTS","filterSelectedProducts","ids","products","calculateTotal","totalPrice","totalDropPrice","totalSellPrice","totalSellingPrice","prepareProductData","preparedProductSetsData","ProductItems","form","initialProducts","isAdmin","role","selectedProducts","setSelectedProducts","search","setSearch","data","useQuery","variables","skip","length","onCountChanged","getFieldValue","newFormData","setFieldsValue","onChange","productIds","newProducts","productItems","setProductsItems","selectedProduct","newFormCalculateData","onSearch","filterOption","input","option","toLowerCase","indexOf","map","product","Option","List","fields","add","remove","field","align","noStyle","shouldUpdate","prevValues","curValues","area","sights","fieldKey","disabled","ORDER_STATUSES","PAID_BEFORE","PAID_AFTER","PAID","OrderForm","onFinish","initialValues","isActive","Form","useForm","layout","initialValue","status","ADD_ORDER","prepareValuesBeforeSubmit","AddOrdersForm","closeModal","refetch","batchOrderId","useMutation","addOrderToBatch","handleSubmit","values","order","alert","UPDATE_ORDER","getProductIds","UpdateOrdersForm","console","log","updateOrder","date","moment","orderId","id","ButtonWrapper","ButtonSettingsWrapper","DeleteButton","DeleteOutlined","color","EditButton","EditOutlined","OrderDetailBtn","QuestionOutlined","SettingsBtn","SettingOutlined","cursor","confirm","Modal","useConfirmDeleteModal","titleName","handleConfirm","icon","ExclamationCircleOutlined","okText","okType","cancelText","onOk","DELETE_ORDER_MUTATION","DeleteOrderBtn","removeOrder","showDeleteConfirmModal","ProductsOrderTable","baseColumns","dataIndex","columns","dataSource","pagination","rowKey","isInCalculateStatus","calculateBatchOrderTotal","moved","orders","calculateBatchOrderProfit","InfoWrapper","BATCH_ORDER_QUERY","BatchOrderTable","useParams","fetchPolicy","loading","batchOrderName","dropBuyerName","batchMovedTotal","total","profit","columnsConfig","render","format","_","showEditOrderModal","margin","size","scroll","y","DELETE_DROPBUYER_MUTATION","DeleteDropBuyerBtn","deleteDropBuyer","DropBuyerForm","valuePropName","ADD_DROPBUYER_MUTATION","AddDropBuyerForm","createdropBuyer","UPDATE_DROPBUYER_MUTATION","DROPBUYER_QUERY","EditDropBuyerForm","updatedropBuyer","update","AddDropBuyerBtn","Button","DROPBUYERS_QUERY","DropBuyerTable","path","generatePath","batchOrdersBuyer","dropBuyerId","showEditDropBuyerModal","Select","DropBuyerSelect","options","BatchOrderForm","ADD_BATCH_ORDERS","AddBatchOrdersForm","createBatchOrders","UPDATE_BATCH_ORDERS_MUTATION","getInitialValues","movedTotal","EditBatchOrdersForm","batchOrder","updateBatchOrders","REMOVE_BATCH_ORDERS_MUTATION","DeleteBatchBtn","batchName","deleteBatch","BATCH_ORDERS_QUERY","BatchOrdersTable","query","internalQuery","setInternalQuery","showEditBatchOrderModal","defaultValue","SettingsForm","UPDATE_SETTINGS","UpdateSettingsForm","updateSettings","dropshippingMarkup","setItem","getSubcategories","categoryId","subcategories","FlexWrapper","useCategoryId","setCategoryId","onValuesChange","CategorySelectItem","CATEGORIES_QUERY","showSearch","allowClear","ProductForm","isSubcategoryNill","removeSubcategoriIsNeed","prepareCategoryId","prepareProductInitialValues","prepareProductBeforeSubmit","subcategoryId","ADD_PRODUCT_MUTATION","AddProductForm","addProduct","UPDATE_PRODUCT_MUTATION","PRODUCT_QUERY","EditProductForm","updateProduct","ProductShortTable","findSelectetdProduct","ProductSelectItem","ProductSetForm","ADD_PRODUCT_SET_MUTATION","AddProductSetForm","addProductSet","UPDATE_PRODUCT_SET_MUTATION","PRODUCT_SET_QUERY","EditProductSetForm","updateProductSet","BtnWrapper","UPDATE_PRODUCTS","CREATE_PRODUCTS","UpdatePrice","updateProductsItems","diffProducts","setNewPrice","createProducts","updateProducts","handleUpdateProducts","res","handleCreateAndUpdate","resCreate","resUpdate","countUpdate","countcareate","HiddenInput","preparePrice","parseInt","prepareOldPrice","UpdatePriceExcel","oldProductPrice","newPrice","ref","useRef","oldPrice","useMemo","nomencaltureDiff","getNomenclatureItemsDiff","nomenclatures","files","target","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","XLSX","read","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","preparedData","readAsArrayBuffer","click","DELETE_PRODUCT_MUTATION","DELETE_PRODUCTSET_MUTATION","DeletePriceBtn","DELETE_MUTATION","priceId","deletePice","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","ExcelExport","element","ExcelExportPublick","SearchFilter","setSelectedKeys","clearFilters","padding","placeholder","onPressEnter","marginBottom","display","SearchOutlined","getColumnSearchProps","filterDropdown","props","filterIcon","filtered","onFilter","record","toString","includes","categoryFragment","productFragment","PRODUCTS_QUERY","CATEGORY_QUERY","PriceTable","categoriesData","productData","productSetsData","sorter","localeCompare","filters","showEditPriceModal","showTotal","CategoryForm","MinusCircleOutlined","block","PlusOutlined","isCategoryNotHaveSubcategory","prepareCategory","prepareSubcategory","populateSubcategoryWithId","uuidv4","populateSubcategoryWithIdIfNeed","prepareCreateCategoryBeforSubmit","prepareUpdateCategoryBeforSubmit","prepareCategoryIntialValues","UPDATE_CATEGORY_MUTATION","EditCategoryForm","updateCategory","updateCategoryId","ADD_CATEGORY_MUTATION","AddCategoryForm","addCategory","DELETE_CATEGORY_MUTATION","DeleteCategoryBtn","deleteCategory","isSubcategory","prepareCategoryData","CategoryTable","showEditCategoryModal","LOGIN_MUTATION","LoginForm","response","token","setTimeout","labelCol","wrapperCol","remember","autoComplete","Password","offset","OWN_ORDER_STATUSES","RETURNED","OwnOrderForm","CREATE_OWN_ORDER","AddOwnOrdersForm","createOwnOrder","UPDATE__OWN_ORDER","UpdateOwnOrdersForm","updateOwnOrder","DELETE_OWN_ORDER_MUTATION","DeleteOwnOrderBtn","removeOwnOrder","OWN_ORDERS_QUERY","calculateOwnOrderProfit","calculatePayed","BATCH_ORDERS_QUERY_STAT","BATCH_PERIODS","Center","prepareOrders","batch","public","publicBatchOrder","publicBatchOrdersBuyer","routesConfig","Layout","rootPath","Component","periodsData","periods","period","currentMonth","Date","toISOString","slice","filterDate","setFilterDate","dateString","picker","index","subcategory","href","AppRouter","SETTINGS_QUERY","App","httpLink","createHttpLink","uri","process","authLink","setContext","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloClientProvider","ApolloProvider","locale","ReactDOM","ru_RU","document","getElementById"],"mappings":"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","file":"static/js/main.56b379be.chunk.js","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { Modal } from \"antd\";\n\nconst useModal = () => {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [modalConfig, setModalConfig] = useState({});\n  const [modalContent, setModalContent] = useState(null);\n\n  const showModal = ({ content, title, width }) => {\n    setIsModalVisible(true);\n    setModalContent(content);\n    setModalConfig({ title, width });\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n    setModalContent(null);\n    setModalConfig({});\n  };\n\n  return {\n    isModalVisible,\n    showModal,\n    handleCancel,\n    modalConfig,\n    modalContent,\n  };\n};\n\nconst ModalContext = React.createContext({});\n\nexport const ModalProvider = ({ children }) => {\n  const { isModalVisible, showModal, handleCancel, modalConfig, modalContent } =\n    useModal();\n\n  return (\n    <ModalContext.Provider\n      value={{\n        isModalVisible,\n        showModal,\n        handleCancel,\n        modalConfig,\n      }}\n    >\n      {children}\n      {isModalVisible && (\n        <Modal\n          title={modalConfig.title}\n          visible={isModalVisible}\n          onCancel={handleCancel}\n          footer={null}\n          width={modalConfig.width}\n        >\n          {modalContent}\n        </Modal>\n      )}\n    </ModalContext.Provider>\n  );\n};\n\nexport const useModalContext = () => {\n  const modalContext = useContext(ModalContext);\n  return modalContext;\n};\n","import { Outlet } from \"react-router\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const LoginLayout = () => {\n  return (\n    <Wrapper>\n      <Outlet />\n    </Wrapper>\n  );\n};\n\nexport const EmptyLayout = () => {\n  return (\n    <div>\n      <Outlet />\n    </div>\n  );\n};\n","import React, { useContext, useState } from \"react\";\n\nconst useUser = () => {\n  const [user, setUser] = useState(null);\n\n  const userLogin = (user) => {\n    setUser(user);\n  };\n\n  const userLogout = () => {\n    setUser(null);\n    localStorage.removeItem(\"token\");\n    window.location.reload();\n  };\n\n  return {\n    user,\n    userLogin,\n    userLogout,\n  };\n};\n\nconst UserContext = React.createContext({});\n\nexport const UserProvider = ({ children }) => {\n  const { user, userLogin, userLogout } = useUser();\n\n  return (\n    <UserContext.Provider\n      value={{\n        user,\n        userLogin,\n        userLogout,\n      }}\n    >\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUserContext = () => {\n  const userContext = useContext(UserContext);\n  return userContext;\n};\n","import { Menu } from \"antd\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { useUserContext } from \"../providers/UserProvider\";\n\nimport { routes } from \"../routes/config\";\n\nconst ExitBtn = styled.div`\n  cursor: pointer;\n  float: right;\n  &:hover {\n    color: #fff;\n  }\n`;\n\nconst UserNameInfo = styled.span`\n  margin: 0 20px;\n`;\n\nexport const AppMenu = () => {\n  const location = useLocation();\n  const [current, setCurrent] = useState(location.pathname);\n\n  const { user, userLogout } = useUserContext();\n\n  const navigate = useNavigate();\n\n  const handleClick = (e) => {\n    setCurrent(e.key);\n    navigate(e.key);\n  };\n\n  return (\n    <Menu\n      onClick={handleClick}\n      selectedKeys={[current]}\n      mode=\"horizontal\"\n      theme=\"dark\"\n    >\n      <Menu.Item key={routes.home}>Прайс</Menu.Item>\n      <Menu.Item key={routes.category}>Категорії</Menu.Item>\n      <Menu.Item key={routes.dropBuyer}>Дропшиппери</Menu.Item>\n      <Menu.Item key={routes.batchOrders}>Замовлення</Menu.Item>\n      <Menu.Item key={routes.statistic}>Статистика</Menu.Item>\n      <Menu.Item key={routes.ownOrders}>Мої замовлення</Menu.Item>\n      <Menu.Item\n        style={{ marginLeft: \"auto\" }}\n        key={routes.login}\n        onClick={userLogout}\n      >\n        <UserNameInfo>Користувач: {user?.username}</UserNameInfo>\n        <ExitBtn>Вийти</ExitBtn>\n      </Menu.Item>\n    </Menu>\n  );\n};\n","import { Outlet } from \"react-router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useNavigate } from \"react-router\";\nimport * as R from \"ramda\";\n\nimport { AppMenu } from \"./AppMenu\";\nimport { routes } from \"../routes/config\";\nimport { useUserContext } from \"../providers/UserProvider\";\n\nconst ME_QUERY = gql`\n  query ME_QUERY {\n    me {\n      username\n      role\n    }\n  }\n`;\n\nexport const MainLayout = () => {\n  const { data, loading } = useQuery(ME_QUERY);\n  const navigate = useNavigate();\n\n  const { userLogin } = useUserContext();\n\n  if (loading) {\n    return null;\n  }\n\n  const user = R.propOr(null, \"me\", data);\n\n  if (!user) {\n    navigate(routes.login);\n  } else {\n    userLogin(user);\n  }\n\n  return (\n    <>\n      <AppMenu />\n      <Outlet />\n    </>\n  );\n};\n","export const priceTypes = {\n  PRODUCT: \"Продукт\",\n  PRODUCT_SET: \"Набір\",\n};\n","import * as R from \"ramda\";\n\nimport { priceTypes } from \"./priceTypes\";\n\nconst EMPTT_VALUE = \"-\";\n\nconst DROPSHIPPING_MARKUP = localStorage.getItem(\"setting\") || 10;\nconst WHOLESALE_MARKUP = -5;\n\n// fixedFloat :: Number -> Number -> Number\nconst fixedFloat = (to) => R.invoker(1, \"toFixed\")(to);\n\nexport const roundToKopeck = (value) =>\n  Math.round((value + Number.EPSILON) * 100) / 100;\n\n// calculateMarkup :: Number -> Number\nconst calculateMarkup = R.curry((markup, price) =>\n  R.compose(\n    fixedFloat(2),\n    R.multiply(R.add(100, markup)),\n    R.divide(R.__, 100)\n  )(price)\n);\n\n// findProductSubCategory :: Product -> Subcategory\nconst findProductSubCategory = R.converge(R.find, [\n  R.compose(R.propEq(\"_id\"), R.propOr(undefined, \"subcategoryId\")),\n  R.pathOr([], [\"category\", \"subcategories\"]),\n]);\n\nconst commonProductFields = {\n  _id: R.prop(\"_id\"),\n  nomenclature: R.propOr(EMPTT_VALUE, \"nomenclature\"),\n  article: R.propOr(EMPTT_VALUE, \"article\"),\n  categoryName: R.pathOr(EMPTT_VALUE, [\"category\", \"name\"]),\n  subcategoryName: R.compose(\n    R.propOr(EMPTT_VALUE, \"name\"),\n    findProductSubCategory\n  ),\n};\n\n// preparepProductData :: ProductQueryData -> [PreparedProduct]\nexport const preparepProductData = R.compose(\n  R.map(\n    R.compose(\n      R.converge(R.mergeRight, [\n        R.identity,\n        R.applySpec({\n          wholesalePrice: R.compose(\n            Math.round,\n            calculateMarkup(WHOLESALE_MARKUP),\n            R.propOr(0, \"sellingPrice\")\n          ),\n        }),\n      ]),\n      R.applySpec({\n        ...commonProductFields,\n        count: R.propOr(EMPTT_VALUE, \"count\"),\n        price: R.propOr(EMPTT_VALUE, \"price\"),\n        dropPrice: R.compose(\n          parseFloat,\n          calculateMarkup(DROPSHIPPING_MARKUP),\n          R.propOr(0, \"price\")\n        ),\n        sellingPrice: R.prop(\"sellingPrice\"),\n        type: R.always(priceTypes.PRODUCT),\n        category: R.propOr({}, \"category\"),\n        markup: R.propOr(null, \"markup\"),\n      })\n    )\n  ),\n  R.propOr([], \"products\")\n);\n\nconst getProducts = R.propOr([], \"products\");\n\nconst diff = (a, b) => a - b;\n\nexport const preparedProductSetData = R.compose(\n  R.map(\n    R.applySpec({\n      ...commonProductFields,\n      price: R.compose(roundToKopeck, R.sum, R.pluck(\"price\"), getProducts),\n      count: R.compose(R.head, R.sort(diff), R.pluck(\"count\"), getProducts),\n      dropPrice: R.compose(\n        roundToKopeck,\n        parseFloat,\n        R.sum,\n        R.pluck(\"dropPrice\"),\n        getProducts\n      ),\n      sellingPrice: R.compose(\n        Math.round,\n        R.sum,\n        R.pluck(\"sellingPrice\"),\n        getProducts\n      ),\n      wholesalePrice: R.compose(\n        Math.round,\n        R.sum,\n        R.pluck(\"wholesalePrice\"),\n        getProducts\n      ),\n      type: R.always(priceTypes.PRODUCT_SET),\n    })\n  ),\n  R.map(\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.compose(R.objOf(\"products\"), preparepProductData),\n    ])\n  ),\n  R.propOr([], \"productSets\")\n);\n\nexport const getCategoriesOptions = R.compose(\n  R.applySpec({\n    categories: R.compose(R.uniq, R.pluck(\"name\")),\n    subCategories: R.compose(\n      R.reject(R.isNil),\n      R.uniq,\n      R.pluck(\"name\"),\n      R.unnest,\n      R.pluck(\"subcategories\")\n    ),\n  }),\n  R.propOr([], \"categories\")\n);\n\nexport const getCategoryFiletrOptions = R.compose(\n  R.append({\n    text: EMPTT_VALUE,\n    value: EMPTT_VALUE,\n  }),\n  R.map(\n    R.applySpec({\n      text: R.identity,\n      value: R.identity,\n    })\n  )\n);\n","import { Form, Input, Button, InputNumber } from \"antd\";\n\nexport const requiredRule = {\n  required: true,\n  message: \"Це поле обов'язкове\",\n};\n\nexport const SubmitBtnItem = () => (\n  <Form.Item>\n    <Button type=\"primary\" htmlType=\"submit\">\n      Зберегти\n    </Button>\n  </Form.Item>\n);\n\nexport const MarkupInputItem = () => (\n  <Form.Item label=\"Націнка\" name=\"markup\">\n    <InputNumber min={0} />\n  </Form.Item>\n);\n\nexport const ArticleInputItem = () => (\n  <Form.Item label=\"Артикул\" name=\"article\" rules={[requiredRule]}>\n    <Input />\n  </Form.Item>\n);\n","import { useState } from \"react\";\n\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Form, Select, Space, Input, InputNumber } from \"antd\";\nimport * as R from \"ramda\";\nimport { requiredRule } from \"../../../components/Form\";\nimport {\n  preparedProductSetData,\n  preparepProductData,\n  roundToKopeck,\n} from \"../../price/PriceTable/priceTableUtils\";\nimport { useUserContext } from \"../../../providers/UserProvider\";\n\nexport const SEARCH_PRODUCTS = gql`\n  query productsSearch($search: String!) {\n    productsSearch(search: $search) {\n      _id\n      nomenclature\n      article\n      price\n      markup\n      sellingPrice\n      category {\n        _id\n        name\n        markup\n        subcategories {\n          _id\n          name\n          markup\n        }\n      }\n    }\n    productSetSearch(search: $search) {\n      _id\n      nomenclature\n      article\n      products {\n        _id\n        nomenclature\n        article\n        price\n        markup\n        sellingPrice\n        category {\n          _id\n          name\n          markup\n          subcategories {\n            _id\n            name\n            markup\n          }\n        }\n      }\n      category {\n        _id\n        name\n        markup\n        subcategories {\n          _id\n          name\n          markup\n        }\n      }\n      subcategoryId\n    }\n  }\n`;\n\nconst filterSelectedProducts = R.curry((ids, products) =>\n  R.filter(R.compose(R.includes(R.__, ids), R.prop(\"_id\")), products)\n);\n\nconst calculateTotal = R.compose(\n  R.applySpec({\n    products: R.identity,\n    totalPrice: R.compose(\n      roundToKopeck,\n      R.sum,\n      R.map(R.propOr(0, \"totalPrice\"))\n    ),\n    totalDropPrice: R.compose(\n      roundToKopeck,\n      R.sum,\n      R.map(R.propOr(0, \"totalDropPrice\"))\n    ),\n    totalSellPrice: R.compose(\n      roundToKopeck,\n      R.sum,\n      R.map(R.propOr(0, \"totalSellingPrice\"))\n    ),\n  }),\n  R.map(\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.applySpec({\n        totalPrice: R.converge(R.multiply, [R.prop(\"price\"), R.prop(\"count\")]),\n        totalDropPrice: R.converge(R.multiply, [\n          R.prop(\"dropPrice\"),\n          R.prop(\"count\"),\n        ]),\n        totalSellingPrice: R.converge(R.multiply, [\n          R.prop(\"sellingPrice\"),\n          R.prop(\"count\"),\n        ]),\n      }),\n    ])\n  )\n);\n\nconst prepareProductData = R.compose(\n  preparepProductData,\n  R.objOf(\"products\"),\n  R.map(\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.applySpec({ count: R.propOr(1, \"count\") }),\n    ])\n  ),\n  R.propOr([], \"productsSearch\")\n);\n\nconst preparedProductSetsData = R.compose(\n  R.map(\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.applySpec({\n        count: R.ifElse(R.propEq(\"count\", \"-\"), R.always(1), R.prop(\"count\")),\n      }),\n    ])\n  ),\n  preparedProductSetData,\n  R.objOf(\"productSets\"),\n\n  R.propOr([], \"productSetSearch\")\n);\n\nexport const ProductItems = ({ form, initialProducts = [] }) => {\n  const { user } = useUserContext();\n\n  const isAdmin = user.role === \"ADMIN\";\n  const [selectedProducts, setSelectedProducts] = useState(initialProducts);\n\n  const [search, setSearch] = useState(\"\");\n\n  const { data } = useQuery(SEARCH_PRODUCTS, {\n    variables: {\n      search,\n    },\n    skip: search.length < 3,\n  });\n\n  const onSearch = (value) => {\n    setSearch(value);\n  };\n\n  const onChange = (productIds) => {\n    let newProducts = [];\n\n    if (productIds.length > selectedProducts.length) {\n      const productItems = prepareProductData(data);\n      const setProductsItems = preparedProductSetsData(data);\n\n      const selectedProduct = R.find(R.propEq(\"_id\", R.last(productIds)), [\n        ...productItems,\n        ...setProductsItems,\n      ]);\n      newProducts = [...selectedProducts, selectedProduct];\n    } else {\n      newProducts = filterSelectedProducts(productIds, selectedProducts);\n    }\n\n    const newFormCalculateData = calculateTotal(newProducts);\n\n    form.setFieldsValue(newFormCalculateData);\n    setSelectedProducts(newFormCalculateData.products);\n  };\n\n  const onCountChanged = () => {\n    const products = form.getFieldValue(\"products\");\n    const newFormData = calculateTotal(products);\n    form.setFieldsValue(newFormData);\n    setSelectedProducts(newFormData.products);\n  };\n\n  const products = R.uniq([\n    ...R.propOr([], \"productsSearch\", data),\n    ...R.propOr([], \"productSetSearch\", data),\n    ...initialProducts,\n  ]);\n\n  return (\n    <>\n      <Form.Item label=\"Продукти(Артикул)\" name=\"productIds\">\n        <Select\n          onChange={onChange}\n          onSearch={onSearch}\n          mode=\"multiple\"\n          filterOption={(input, option) =>\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n        >\n          {products.map((product) => (\n            <Select.Option key={product._id} value={product._id}>\n              {product.article}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n\n      <Form.List name=\"products\">\n        {(fields, { add, remove }) => (\n          <>\n            {fields.map((field) => (\n              <Space key={field.key} align=\"baseline\">\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.area !== curValues.area ||\n                    prevValues.sights !== curValues.sights\n                  }\n                >\n                  {() => (\n                    <Form.Item\n                      {...field}\n                      label=\"Номенклатура\"\n                      name={[field.name, \"nomenclature\"]}\n                      fieldKey={[field.fieldKey, \"nomenclature\"]}\n                      rules={[requiredRule]}\n                    >\n                      <Input disabled={true} />\n                    </Form.Item>\n                  )}\n                </Form.Item>\n                <Form.Item\n                  {...field}\n                  label=\"Ціна дроп\"\n                  name={[field.name, \"dropPrice\"]}\n                  fieldKey={[field.fieldKey, \"dropPrice\"]}\n                  rules={[requiredRule]}\n                  onChange={onCountChanged}\n                >\n                  <InputNumber disabled={!isAdmin} />\n                </Form.Item>\n                <Form.Item\n                  {...field}\n                  label=\"Кількість\"\n                  name={[field.name, \"count\"]}\n                  fieldKey={[field.fieldKey, \"count\"]}\n                  rules={[requiredRule]}\n                  onChange={onCountChanged}\n                >\n                  <InputNumber />\n                </Form.Item>\n              </Space>\n            ))}\n          </>\n        )}\n      </Form.List>\n\n      <br></br>\n    </>\n  );\n};\n","import { Form, Input, InputNumber, Space, Select, DatePicker } from \"antd\";\nimport * as R from \"ramda\";\n\nimport { requiredRule, SubmitBtnItem } from \"../../../components/Form\";\nimport { useUserContext } from \"../../../providers/UserProvider\";\nimport { ProductItems } from \"./ProductItems\";\n\nexport const ORDER_STATUSES = {\n  PAID_BEFORE: \"Предоплата\",\n  PAID_AFTER: \"Наложка\",\n  PAID: \"Наложка Отримана\",\n};\n\nexport const OrderForm = ({\n  onFinish,\n  initialValues = { isActive: true },\n  initialProducts = [],\n}) => {\n  const [form] = Form.useForm();\n  const { user } = useUserContext();\n  const isAdmin = user.role === \"ADMIN\";\n\n  return (\n    <Form\n      form={form}\n      name=\"orderForm\"\n      onFinish={onFinish}\n      layout={\"vertical\"}\n      initialValues={initialValues}\n    >\n      <Form.Item name=\"date\" label=\"Дата\" rules={[requiredRule]}>\n        <DatePicker />\n      </Form.Item>\n      <Form.Item label=\"ТТН\" name=\"ttn\">\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Статус\"\n        name=\"status\"\n        initialValue={ORDER_STATUSES.PAID_BEFORE}\n      >\n        <Select>\n          {R.values(ORDER_STATUSES).map((status) => (\n            <Select.Option key={status} value={status}>\n              {status}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n      <Form.Item label=\"Коментар\" name=\"buyerInfo\">\n        <Input />\n      </Form.Item>\n      <ProductItems form={form} initialProducts={initialProducts} />\n      <Space>\n        <Form.Item label=\"Оплачено\" name=\"payed\">\n          <InputNumber />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Сума закупка\"\n          name=\"totalDropPrice\"\n          rules={[requiredRule]}\n          initialValue={0}\n        >\n          <InputNumber min={0} disabled={!isAdmin} />\n        </Form.Item>\n      </Space>\n      <br></br>\n      <Space>\n        <Form.Item\n          name=\"totalPrice\"\n          label=\"Сума закупка моя\"\n          rules={[requiredRule]}\n          initialValue={0}\n        >\n          <InputNumber min={0} disabled={!isAdmin} />\n        </Form.Item>\n        <Form.Item\n          name=\"totalSellPrice\"\n          label=\"Сума продаж\"\n          rules={[requiredRule]}\n          initialValue={0}\n        >\n          <InputNumber min={0} disabled={!isAdmin} />\n        </Form.Item>\n      </Space>\n\n      <SubmitBtnItem />\n    </Form>\n  );\n};\n","import { useMutation, gql } from \"@apollo/client\";\nimport * as R from \"ramda\";\nimport { roundToKopeck } from \"../../price/PriceTable/priceTableUtils\";\nimport { OrderForm } from \"./OrderForm\";\n\nconst ADD_ORDER = gql`\n  mutation addOrderToBatch($batchOrderId: ID!, $order: OrderInput!) {\n    addOrderToBatch(batchOrderId: $batchOrderId, order: $order) {\n      _id\n    }\n  }\n`;\n\nexport const prepareValuesBeforeSubmit = R.compose(\n  R.converge(R.mergeRight, [\n    R.identity,\n    R.compose(\n      R.objOf(\"products\"),\n      R.map(\n        R.applySpec({\n          _id: R.prop(\"_id\"),\n          article: R.prop(\"article\"),\n          count: R.prop(\"count\"),\n          price: R.compose(roundToKopeck, R.prop(\"price\")),\n          dropPrice: R.compose(roundToKopeck, R.prop(\"dropPrice\")),\n          sellingPrice: R.compose(roundToKopeck, R.prop(\"sellingPrice\")),\n          nomenclature: R.prop(\"nomenclature\"),\n        })\n      ),\n      R.propOr([], \"products\")\n    ),\n  ]),\n  R.dissoc(\"productIds\")\n);\n\nexport const AddOrdersForm = ({ closeModal, refetch, batchOrderId }) => {\n  const [addOrderToBatch] = useMutation(ADD_ORDER);\n\n  const handleSubmit = async (values) => {\n    try {\n      await addOrderToBatch({\n        variables: {\n          batchOrderId,\n          order: prepareValuesBeforeSubmit(values),\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return <OrderForm onFinish={handleSubmit} />;\n};\n","import { useMutation, gql } from \"@apollo/client\";\nimport * as R from \"ramda\";\nimport moment from \"moment\";\n\nimport { prepareValuesBeforeSubmit } from \"./AddOrderForm\";\nimport { OrderForm } from \"./OrderForm\";\n\nconst UPDATE_ORDER = gql`\n  mutation updateOrder($batchOrderId: ID!, $orderId: ID!, $order: OrderInput!) {\n    updateOrder(batchOrderId: $batchOrderId, orderId: $orderId, order: $order) {\n      _id\n    }\n  }\n`;\n\nconst getProductIds = R.compose(R.map(R.prop(\"_id\")), R.propOr([], \"products\"));\n\nexport const UpdateOrdersForm = ({\n  closeModal,\n  refetch,\n  batchOrderId,\n  order,\n}) => {\n  console.log(order);\n  const [updateOrder] = useMutation(UPDATE_ORDER);\n\n  const productIds = getProductIds(order);\n\n  const initialValues = { ...order, productIds, date: moment(order.date) };\n\n  const initialProducts = R.propOr([], \"products\", order);\n\n  const handleSubmit = async (values) => {\n    try {\n      updateOrder({\n        variables: {\n          batchOrderId,\n          orderId: order.id,\n          order: { ...prepareValuesBeforeSubmit(values) },\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return (\n    <OrderForm\n      onFinish={handleSubmit}\n      initialValues={initialValues}\n      initialProducts={initialProducts}\n    />\n  );\n};\n","import styled from \"styled-components\";\nimport {\n  DeleteOutlined,\n  EditOutlined,\n  QuestionOutlined,\n  SettingOutlined,\n} from \"@ant-design/icons\";\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  padding: 10px 15px;\n  gap: 12px;\n`;\n\nexport const ButtonSettingsWrapper = styled.div`\n  display: flex;\n  width: 58%;\n  justify-content: flex-end;\n  @media (max-width: 1600px) {\n    width: 37%;\n  }\n`;\n\nexport const DeleteButton = ({ onClick }) => (\n  <DeleteOutlined onClick={onClick} style={{ color: \"#ac372f\" }} />\n);\n\nexport const EditButton = ({ onClick }) => (\n  <EditOutlined onClick={onClick} style={{ color: \"#2a66c6\" }} />\n);\n\nexport const OrderDetailBtn = ({ onClick }) => (\n  <QuestionOutlined onClick={onClick} style={{ color: \"green\" }} />\n);\n\nexport const SettingsBtn = ({ onClick }) => (\n  <ButtonSettingsWrapper>\n    <SettingOutlined onClick={onClick} style={{ cursor: \"pointer\" }} />\n  </ButtonSettingsWrapper>\n);\n","import { Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\n\nconst { confirm } = Modal;\n\nexport const useConfirmDeleteModal = (titleName, handleConfirm, refetch) => {\n  return () =>\n    confirm({\n      title: `Ви впевнені що хочите видалити ${titleName}`,\n      icon: <ExclamationCircleOutlined />,\n      okText: \"Так\",\n      okType: \"danger\",\n      cancelText: \"Ні\",\n      onOk: async () => {\n        try {\n          await handleConfirm();\n          await refetch();\n        } catch (e) {\n          alert(e);\n        }\n      },\n    });\n};\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { DeleteButton } from \"../../../components/Button\";\nimport { useConfirmDeleteModal } from \"../../../hook/useCinfirmModal\";\n\nconst DELETE_ORDER_MUTATION = gql`\n  mutation removeOrder($batchOrderId: ID!, $orderId: ID!) {\n    removeOrder(batchOrderId: $batchOrderId, orderId: $orderId) {\n      _id\n    }\n  }\n`;\n\nexport const DeleteOrderBtn = ({ batchOrderId, orderId, refetch }) => {\n  const [removeOrder] = useMutation(DELETE_ORDER_MUTATION, {\n    variables: { batchOrderId, orderId },\n  });\n\n  const showDeleteConfirmModal = useConfirmDeleteModal(\n    \"замовлення\",\n    removeOrder,\n    refetch\n  );\n\n  return <DeleteButton onClick={showDeleteConfirmModal} />;\n};\n","import { Table } from \"antd\";\n\nexport const ProductsOrderTable = ({ type, products }) => {\n  const baseColumns = [\n    {\n      title: \"Номенклатура\",\n      dataIndex: \"nomenclature\",\n    },\n    {\n      title: \"Артикул\",\n      dataIndex: \"article\",\n    },\n    {\n      title: \"Кількість\",\n      dataIndex: \"count\",\n    },\n  ];\n\n  let columns = [];\n\n  if (type === \"own\") {\n    columns = [\n      ...baseColumns,\n      {\n        title: \"Закупка моя\",\n        dataIndex: \"price\",\n      },\n      {\n        title: \"Продаж\",\n        dataIndex: \"sellingPrice\",\n      },\n    ];\n  } else if (type === \"public-drop\") {\n    columns = [\n      ...baseColumns,\n      {\n        title: \"Закупка\",\n        dataIndex: \"dropPrice\",\n      },\n    ];\n  } else if (type === \"drop\") {\n    columns = [\n      ...baseColumns,\n      {\n        title: \"Закупка моя\",\n        dataIndex: \"price\",\n      },\n      {\n        title: \"Закупка\",\n        dataIndex: \"dropPrice\",\n      },\n      {\n        title: \"Продаж\",\n        dataIndex: \"sellingPrice\",\n      },\n    ];\n  }\n\n  return (\n    <Table\n      dataSource={products}\n      columns={columns}\n      pagination={false}\n      rowKey=\"nomenclature\"\n    />\n  );\n};\n","import { useQuery, gql } from \"@apollo/client\";\nimport { Table, Button } from \"antd\";\nimport * as R from \"ramda\";\nimport moment from \"moment\";\n\nimport { useModalContext } from \"../../providers/ModalProvider\";\nimport { useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { AddOrdersForm } from \"./form/AddOrderForm\";\nimport { UpdateOrdersForm } from \"./form/UpdateOrderForm\";\nimport {\n  ButtonWrapper,\n  EditButton,\n  OrderDetailBtn,\n} from \"../../components/Button\";\nimport { DeleteOrderBtn } from \"./form/DeleteOrderBtn\";\nimport { ORDER_STATUSES } from \"./form/OrderForm\";\nimport { roundToKopeck } from \"../price/PriceTable/priceTableUtils\";\nimport { ProductsOrderTable } from \"../../components/ProductsOrderTable\";\n\nexport const isInCalculateStatus = R.compose(\n  R.includes(R.__, [ORDER_STATUSES.PAID, ORDER_STATUSES.PAID_BEFORE]),\n  R.prop(\"status\")\n);\n\nexport const calculateBatchOrderTotal = R.curry((moved, orders) =>\n  R.compose(\n    roundToKopeck,\n    R.converge(R.subtract, [\n      R.compose(R.add(moved), R.sum, R.map(R.propOr(0, \"payed\"))),\n      R.compose(R.sum, R.map(R.propOr(0, \"totalDropPrice\"))),\n    ]),\n    R.filter(isInCalculateStatus)\n  )(orders)\n);\n\nexport const calculateBatchOrderProfit = R.compose(\n  roundToKopeck,\n  R.converge(R.subtract, [\n    R.compose(R.sum, R.map(R.propOr(0, \"totalDropPrice\"))),\n    R.compose(R.sum, R.map(R.propOr(0, \"totalPrice\"))),\n  ]),\n  R.filter(isInCalculateStatus)\n);\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const BATCH_ORDER_QUERY = gql`\n  query batchOrderQuery($id: ID!) {\n    batchOrder(id: $id) {\n      _id\n      name\n      dropBuyer {\n        _id\n        name\n      }\n      isActive\n      movedTotal\n      orders {\n        id\n        date\n        totalPrice\n        totalSellPrice\n        totalDropPrice\n        payed\n        ttn\n        buyerInfo\n        status\n        products {\n          _id\n          article\n          count\n          price\n          dropPrice\n          sellingPrice\n          nomenclature\n        }\n      }\n    }\n  }\n`;\n\nexport const BatchOrderTable = () => {\n  const { batchOrderId } = useParams();\n  const { showModal, handleCancel } = useModalContext();\n\n  const { data, loading, refetch } = useQuery(BATCH_ORDER_QUERY, {\n    variables: {\n      id: batchOrderId,\n    },\n    skip: !batchOrderId,\n    fetchPolicy: \"network-only\",\n  });\n\n  const batchOrderName = R.pathOr(\"\", [\"batchOrder\", \"name\"], data);\n  const dropBuyerName = R.pathOr(\"\", [\"batchOrder\", \"dropBuyer\", \"name\"], data);\n  const batchMovedTotal = R.pathOr(\"\", [\"batchOrder\", \"movedTotal\"], data);\n\n  const orders = R.compose(\n    R.reverse,\n    R.sortBy(R.prop(\"date\")),\n    R.pathOr([], [\"batchOrder\", \"orders\"])\n  )(data);\n\n  const total = calculateBatchOrderTotal(batchMovedTotal)(orders);\n\n  const profit = calculateBatchOrderProfit(orders);\n\n  const showAddOrderModal = () =>\n    showModal({\n      title: `Додати нове замовлення до ${batchOrderName}`,\n      content: () => (\n        <AddOrdersForm\n          closeModal={handleCancel}\n          refetch={refetch}\n          batchOrderId={batchOrderId}\n        />\n      ),\n    });\n\n  const showEditOrderModal = (order) =>\n    showModal({\n      title: `Редагувати замовлення`,\n      content: () => (\n        <UpdateOrdersForm\n          closeModal={handleCancel}\n          refetch={refetch}\n          batchOrderId={batchOrderId}\n          order={order}\n        />\n      ),\n    });\n\n  const showOrderDetailModal = (products) =>\n    showModal({\n      title: \"Продукти\",\n      width: 1000,\n      content: () => <ProductsOrderTable products={products} type=\"drop\" />,\n    });\n\n  const columnsConfig = [\n    {\n      title: \"Дата\",\n      dataIndex: \"date\",\n      render: (value) => moment(value).format(\"YYYY-MM-DD\"),\n    },\n    {\n      title: \"Коментар\",\n      dataIndex: \"buyerInfo\",\n    },\n    {\n      title: \"ТТН\",\n      dataIndex: \"ttn\",\n    },\n    {\n      title: \"Сума закупка моя\",\n      dataIndex: \"totalPrice\",\n    },\n    {\n      title: \"Сума закупка\",\n      dataIndex: \"totalDropPrice\",\n    },\n\n    {\n      title: \"Оплачено\",\n      dataIndex: \"payed\",\n    },\n\n    {\n      title: \"Статус\",\n      dataIndex: \"status\",\n    },\n\n    {\n      dataIndex: \"_id\",\n      render: (_, order) => (\n        <ButtonWrapper>\n          <OrderDetailBtn\n            onClick={() =>\n              showOrderDetailModal(R.propOr([], \"products\", order))\n            }\n          />\n          <EditButton onClick={() => showEditOrderModal(order)} />\n          <DeleteOrderBtn\n            batchOrderId={batchOrderId}\n            orderId={order.id}\n            refetch={refetch}\n          />\n        </ButtonWrapper>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <InfoWrapper>\n        <Button\n          style={{ margin: \"10px\" }}\n          type=\"primary\"\n          onClick={showAddOrderModal}\n        >\n          Додати замовлення\n        </Button>\n        <p>Назва: {batchOrderName}</p>\n        <p>Дропшиппер: {dropBuyerName}</p>\n        <p>Перенесено: {batchMovedTotal} грн</p>\n\n        <h3>\n          <b>Баланс: {total} грн</b>\n        </h3>\n        <p>Дохід: {profit} грн</p>\n      </InfoWrapper>\n\n      <Table\n        columns={columnsConfig}\n        dataSource={orders}\n        loading={loading}\n        rowKey=\"id\"\n        pagination={false}\n        size=\"small\"\n        scroll={{ y: 800 }}\n      />\n    </>\n  );\n};\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { DeleteButton } from \"../../components/Button\";\nimport { useConfirmDeleteModal } from \"../../hook/useCinfirmModal\";\n\nconst DELETE_DROPBUYER_MUTATION = gql`\n  mutation deleteDropBuyer($id: ID!) {\n    deletedropBuyer(id: $id)\n  }\n`;\n\nexport const DeleteDropBuyerBtn = ({ id, name, refetch }) => {\n  const [deleteDropBuyer] = useMutation(DELETE_DROPBUYER_MUTATION, {\n    variables: { id },\n  });\n\n  const showDeleteConfirmModal = useConfirmDeleteModal(\n    name,\n    deleteDropBuyer,\n    refetch\n  );\n\n  return <DeleteButton onClick={showDeleteConfirmModal} />;\n};\n","import { Form, Input, Checkbox } from \"antd\";\n\nimport { requiredRule, SubmitBtnItem } from \"../../../components/Form\";\n\nexport const DropBuyerForm = ({\n  onFinish,\n  initialValues = { isActive: true },\n}) => {\n  return (\n    <Form\n      name=\"dropBuyerForm\"\n      onFinish={onFinish}\n      layout={\"vertical\"}\n      initialValues={initialValues}\n    >\n      <Form.Item label=\"Назва\" name=\"name\" rules={[requiredRule]}>\n        <Input />\n      </Form.Item>\n\n      <Form.Item name=\"isActive\" valuePropName=\"checked\">\n        <Checkbox>Активний</Checkbox>\n      </Form.Item>\n\n      <SubmitBtnItem />\n    </Form>\n  );\n};\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { DropBuyerForm } from \"./DropBuyerForm\";\n\nconst ADD_DROPBUYER_MUTATION = gql`\n  mutation createdropBuyer($input: DropBuyerInput!) {\n    createdropBuyer(input: $input) {\n      _id\n    }\n  }\n`;\n\nexport const AddDropBuyerForm = ({ closeModal, refetch }) => {\n  const [createdropBuyer] = useMutation(ADD_DROPBUYER_MUTATION);\n\n  const handleSubmit = async (values) => {\n    try {\n      await createdropBuyer({\n        variables: {\n          input: values,\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return <DropBuyerForm onFinish={handleSubmit} />;\n};\n","import { useMutation, gql, useQuery } from \"@apollo/client\";\nimport * as R from \"ramda\";\n\nimport { DropBuyerForm } from \"./DropBuyerForm\";\n\nconst UPDATE_DROPBUYER_MUTATION = gql`\n  mutation updatedropBuyer($id: ID!, $update: DropBuyerInput!) {\n    updatedropBuyer(id: $id, update: $update) {\n      _id\n    }\n  }\n`;\n\nconst DROPBUYER_QUERY = gql`\n  query dropBuyer($id: ID!) {\n    dropBuyer(id: $id) {\n      _id\n      name\n      isActive\n    }\n  }\n`;\n\nexport const EditDropBuyerForm = ({ id, closeModal, refetch }) => {\n  const { data, loading } = useQuery(DROPBUYER_QUERY, {\n    variables: { id },\n    fetchPolicy: \"network-only\",\n  });\n\n  const initialValues = R.propOr({}, \"dropBuyer\", data);\n\n  const [updatedropBuyer] = useMutation(UPDATE_DROPBUYER_MUTATION);\n\n  const handleSubmit = async (values) => {\n    try {\n      await updatedropBuyer({\n        variables: {\n          id,\n          update: values,\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  if (loading) return null;\n\n  console.log({ initialValues, id, data });\n\n  return (\n    <DropBuyerForm onFinish={handleSubmit} initialValues={initialValues} />\n  );\n};\n","import { DeleteDropBuyerBtn } from \"./DeleteDropBuyerBtn\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Table, Button } from \"antd\";\nimport * as R from \"ramda\";\nimport { generatePath } from \"react-router\";\n\nimport { ButtonWrapper, EditButton } from \"../../components/Button\";\nimport { useModalContext } from \"../../providers/ModalProvider\";\nimport { AddDropBuyerForm } from \"./dropBuyerForm/AddDropBuyerForm\";\nimport { EditDropBuyerForm } from \"./dropBuyerForm/EditDropBuyerForm\";\nimport styled from \"styled-components\";\nimport { routes } from \"../../routes/config\";\nimport { Link } from \"react-router-dom\";\n\nconst AddDropBuyerBtn = styled(Button)`\n  margin: 10px;\n`;\n\nexport const DROPBUYERS_QUERY = gql`\n  query {\n    dropBuyers {\n      _id\n      name\n      isActive\n    }\n  }\n`;\n\nexport const DropBuyerTable = () => {\n  const { data, loading, refetch } = useQuery(DROPBUYERS_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { showModal, handleCancel } = useModalContext();\n\n  const showAddDropBuyerModal = () =>\n    showModal({\n      title: \"Додати нового дропшиппера\",\n      content: () => (\n        <AddDropBuyerForm closeModal={handleCancel} refetch={refetch} />\n      ),\n    });\n\n  const showEditDropBuyerModal = (id, name) =>\n    showModal({\n      title: `Редагувати  ${name}`,\n      content: () => (\n        <EditDropBuyerForm\n          closeModal={handleCancel}\n          refetch={refetch}\n          id={id}\n        />\n      ),\n    });\n\n  const columnsConfig = [\n    {\n      title: \"Назва\",\n      dataIndex: \"name\",\n      render: (name, dropBuyer) => {\n        const path = generatePath(routes.batchOrdersBuyer, {\n          dropBuyerId: dropBuyer._id,\n        });\n        return <Link to={path}>{name}</Link>;\n      },\n    },\n\n    {\n      title: \"Активний\",\n      dataIndex: \"isActive\",\n      render: (isActive) => (isActive ? \"Так\" : \"Ні\"),\n    },\n\n    {\n      dataIndex: \"_id\",\n      render: (id, dropBuyer) => (\n        <ButtonWrapper>\n          <EditButton\n            onClick={() => showEditDropBuyerModal(id, dropBuyer.name)}\n          />\n          <DeleteDropBuyerBtn refetch={refetch} id={id} name={dropBuyer.name} />\n        </ButtonWrapper>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <AddDropBuyerBtn type=\"primary\" onClick={showAddDropBuyerModal}>\n        Додати дропшиппера\n      </AddDropBuyerBtn>\n\n      <Table\n        columns={columnsConfig}\n        dataSource={R.propOr([], \"dropBuyers\", data)}\n        loading={loading}\n        rowKey=\"_id\"\n        pagination={false}\n        size=\"small\"\n      />\n    </>\n  );\n};\n","import { Select, Form } from \"antd\";\nimport { useQuery } from \"@apollo/client\";\nimport * as R from \"ramda\";\n\nimport { DROPBUYERS_QUERY } from \"../../dropBuyer/DropBuyerTable\";\nimport { requiredRule } from \"../../../components/Form\";\n\nconst { Option } = Select;\n\nexport const DropBuyerSelect = () => {\n  const { data } = useQuery(DROPBUYERS_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const options = R.propOr([], \"dropBuyers\", data);\n\n  return (\n    <Form.Item label=\"Дропшиппер\" name=\"dropBuyerId\" rules={[requiredRule]}>\n      <Select style={{ width: \"100%\" }}>\n        {options.map((dropBuyer) => (\n          <Option key={dropBuyer._id} value={dropBuyer._id}>\n            {dropBuyer.name}\n          </Option>\n        ))}\n      </Select>\n    </Form.Item>\n  );\n};\n","import { Form, Input, Checkbox, InputNumber } from \"antd\";\n\nimport { requiredRule, SubmitBtnItem } from \"../../../components/Form\";\nimport { DropBuyerSelect } from \"./DropBuyerSelect\";\n\nexport const BatchOrderForm = ({\n  onFinish,\n  initialValues = { isActive: true },\n}) => {\n  return (\n    <Form\n      name=\"batchOrderForm\"\n      onFinish={onFinish}\n      layout={\"vertical\"}\n      initialValues={initialValues}\n    >\n      <Form.Item label=\"Назва\" name=\"name\" rules={[requiredRule]}>\n        <Input />\n      </Form.Item>\n\n      <DropBuyerSelect />\n\n      <Form.Item name=\"isActive\" valuePropName=\"checked\">\n        <Checkbox>Активний</Checkbox>\n      </Form.Item>\n      <Form.Item\n        label=\"Початковий баланс\"\n        name=\"movedTotal\"\n        rules={[requiredRule]}\n      >\n        <InputNumber />\n      </Form.Item>\n\n      <SubmitBtnItem />\n    </Form>\n  );\n};\n","import { useMutation, gql } from \"@apollo/client\";\nimport { BatchOrderForm } from \"./BatchOrderForm\";\n\nconst ADD_BATCH_ORDERS = gql`\n  mutation createBatchOrders($input: BatchOrdersInput!) {\n    createBatchOrders(input: $input) {\n      _id\n    }\n  }\n`;\n\nexport const AddBatchOrdersForm = ({ closeModal, refetch }) => {\n  const [createBatchOrders] = useMutation(ADD_BATCH_ORDERS);\n\n  const handleSubmit = async (values) => {\n    try {\n      await createBatchOrders({\n        variables: {\n          input: values,\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return <BatchOrderForm onFinish={handleSubmit} />;\n};\n","import { useMutation, gql } from \"@apollo/client\";\nimport * as R from \"ramda\";\nimport { BatchOrderForm } from \"./BatchOrderForm\";\n\nconst UPDATE_BATCH_ORDERS_MUTATION = gql`\n  mutation updateBatchOrders($id: ID!, $update: BatchOrdersInput!) {\n    updateBatchOrders(id: $id, update: $update) {\n      _id\n    }\n  }\n`;\n\nconst getInitialValues = R.applySpec({\n  name: R.prop(\"name\"),\n  dropBuyerId: R.path([\"dropBuyer\", \"_id\"]),\n  isActive: R.prop(\"isActive\"),\n  movedTotal: R.prop(\"movedTotal\"),\n});\n\nexport const EditBatchOrdersForm = ({ batchOrder, closeModal, refetch }) => {\n  const [updateBatchOrders] = useMutation(UPDATE_BATCH_ORDERS_MUTATION);\n  console.log(batchOrder);\n  const initialValues = getInitialValues(batchOrder);\n\n  const handleSubmit = async (values) => {\n    try {\n      await updateBatchOrders({\n        variables: {\n          id: batchOrder._id,\n          update: values,\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return (\n    <BatchOrderForm onFinish={handleSubmit} initialValues={initialValues} />\n  );\n};\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { DeleteButton } from \"../../components/Button\";\nimport { useConfirmDeleteModal } from \"../../hook/useCinfirmModal\";\n\nconst REMOVE_BATCH_ORDERS_MUTATION = gql`\n  mutation removeBatchOrders($id: ID!) {\n    removeBatchOrders(id: $id)\n  }\n`;\n\nexport const DeleteBatchBtn = ({ id, batchName, refetch }) => {\n  const [deleteBatch] = useMutation(REMOVE_BATCH_ORDERS_MUTATION, {\n    variables: { id },\n  });\n\n  const showDeleteConfirmModal = useConfirmDeleteModal(\n    batchName,\n    deleteBatch,\n    refetch\n  );\n\n  return <DeleteButton onClick={showDeleteConfirmModal} />;\n};\n","import { useQuery, gql } from \"@apollo/client\";\nimport { Table, Button } from \"antd\";\nimport * as R from \"ramda\";\nimport { useState } from \"react\";\nimport { Select } from \"antd\";\n\nimport { useModalContext } from \"../../providers/ModalProvider\";\nimport { AddBatchOrdersForm } from \"./from/AddBatchOrdersForm\";\nimport { EditBatchOrdersForm } from \"./from/EditBatchOrdersForm\";\nimport { ButtonWrapper, EditButton } from \"../../components/Button\";\nimport { generatePath, Link } from \"react-router-dom\";\nimport { routes } from \"../../routes/config\";\nimport { DeleteBatchBtn } from \"./DeleteBatchBtn\";\n\nconst { Option } = Select;\n\nexport const BATCH_ORDERS_QUERY = gql`\n  query batchOrdersQuery($query: BatchOrdersQuery!) {\n    batchOrders(query: $query) {\n      _id\n      name\n      dropBuyer {\n        _id\n        name\n      }\n      isActive\n      movedTotal\n    }\n  }\n`;\n\nexport const BatchOrdersTable = ({ query }) => {\n  const [internalQuery, setInternalQuery] = useState(query);\n\n  const { showModal, handleCancel } = useModalContext();\n\n  const { data, loading, refetch } = useQuery(BATCH_ORDERS_QUERY, {\n    variables: {\n      query: internalQuery,\n    },\n    skip: !internalQuery,\n    fetchPolicy: \"network-only\",\n  });\n\n  const showEditBatchOrderModal = (batchOrder) =>\n    showModal({\n      title: `Редагувати  ${batchOrder.name}`,\n      content: () => (\n        <EditBatchOrdersForm\n          closeModal={handleCancel}\n          refetch={refetch}\n          batchOrder={batchOrder}\n        />\n      ),\n    });\n\n  const columnsConfig = [\n    {\n      title: \"Назва\",\n      dataIndex: \"name\",\n      render: (name, batchOrder) => {\n        const path = generatePath(routes.batchOrder, {\n          batchOrderId: batchOrder._id,\n        });\n        return <Link to={path}>{name}</Link>;\n      },\n    },\n    {\n      title: \"Дропшиппер\",\n      dataIndex: \"dropBuyer\",\n      render: (dropBuyer) => dropBuyer.name,\n    },\n    {\n      title: \"Активний\",\n      dataIndex: \"isActive\",\n      render: (isActive) => (isActive ? \"Так\" : \"Ні\"),\n    },\n    {\n      dataIndex: \"_id\",\n      render: (id, batchOrder) => (\n        <ButtonWrapper>\n          <EditButton onClick={() => showEditBatchOrderModal(batchOrder)} />\n          <DeleteBatchBtn\n            refetch={refetch}\n            id={id}\n            batchName={batchOrder.name}\n          />\n        </ButtonWrapper>\n      ),\n    },\n  ];\n\n  const handleChangeBatchFilter = (value) => {\n    setInternalQuery({ ...internalQuery, isActive: value });\n  };\n\n  const showAddBatchOrderModal = () =>\n    showModal({\n      title: \"Додати нову групу замовлень\",\n      content: () => (\n        <AddBatchOrdersForm closeModal={handleCancel} refetch={refetch} />\n      ),\n    });\n\n  return (\n    <>\n      <Select\n        defaultValue={true}\n        style={{ width: 120, margin: \"10px\" }}\n        onChange={handleChangeBatchFilter}\n      >\n        <Option value={true}>Активні</Option>\n        <Option value={false}>Не активні</Option>\n      </Select>\n      <Button\n        style={{ margin: \"10px\" }}\n        type=\"primary\"\n        onClick={showAddBatchOrderModal}\n      >\n        Додати нову групу\n      </Button>\n      <Table\n        columns={columnsConfig}\n        dataSource={R.compose(\n          R.reverse,\n          R.sortBy(R.prop(\"name\")),\n          R.propOr([], \"batchOrders\")\n        )(data)}\n        loading={loading}\n        rowKey=\"_id\"\n        pagination={false}\n        size=\"small\"\n      />\n    </>\n  );\n};\n","import { BatchOrdersTable } from \"./BatchOrdersTable\";\n\nconst query = {\n  isActive: true,\n};\n\nexport const BatchOrdersPage = () => {\n  return <BatchOrdersTable query={query} />;\n};\n","import { gql, useMutation } from \"@apollo/client\";\nimport { Form, InputNumber } from \"antd\";\nimport { requiredRule, SubmitBtnItem } from \"./Form\";\n\nconst SettingsForm = ({ onFinish, initialValues }) => {\n  return (\n    <Form\n      name=\"settingsForm\"\n      onFinish={onFinish}\n      layout={\"vertical\"}\n      initialValues={initialValues}\n    >\n      <Form.Item\n        label=\"Націнка дропшипперам\"\n        name=\"dropshippingMarkup\"\n        rules={[requiredRule]}\n      >\n        <InputNumber />\n      </Form.Item>\n\n      <SubmitBtnItem />\n    </Form>\n  );\n};\n\nconst UPDATE_SETTINGS = gql`\n  mutation updateSettings($update: SettingsInput!) {\n    updateSettings(update: $update) {\n      dropshippingMarkup\n    }\n  }\n`;\n\nexport const UpdateSettingsForm = ({ closeModal }) => {\n  const [updateSettings] = useMutation(UPDATE_SETTINGS);\n\n  const initialValues = {\n    dropshippingMarkup: localStorage.getItem(\"setting\"),\n  };\n\n  const handleSubmit = async (values) => {\n    try {\n      await updateSettings({\n        variables: {\n          update: values,\n        },\n      });\n      localStorage.setItem(\"setting\", values.dropshippingMarkup);\n      closeModal();\n      window.location.reload();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return <SettingsForm onFinish={handleSubmit} initialValues={initialValues} />;\n};\n","import { useQuery } from \"@apollo/client\";\nimport { Form, Input, Select, InputNumber } from \"antd\";\nimport * as R from \"ramda\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  ArticleInputItem,\n  MarkupInputItem,\n  requiredRule,\n  SubmitBtnItem,\n} from \"../../../components/Form\";\nimport { CATEGORIES_QUERY } from \"../../category/CategoryTable/CategoryTable\";\n\n// getSubcategories :: Category -> Subcategory Null\nconst getSubcategories = R.curry((categoryId, subcategories) =>\n  R.compose(\n    R.propOr(null, \"subcategories\"),\n    R.find(R.propEq(\"_id\", categoryId))\n  )(subcategories)\n);\n\nconst FlexWrapper = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  gap: 30px;\n`;\n\nexport const useCategoryId = (initialValues) => {\n  const [categoryId, setCategoryId] = useState(initialValues.categoryId);\n\n  const onValuesChange = (_, { categoryId }) => {\n    if (categoryId) {\n      setCategoryId(categoryId);\n    }\n  };\n\n  return {\n    categoryId,\n    onValuesChange,\n  };\n};\n\nexport const CategorySelectItem = ({ categoryId }) => {\n  const { data, loading } = useQuery(CATEGORIES_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const categories = R.propOr([], \"categories\", data);\n\n  if (loading) return null;\n\n  const subcategories = getSubcategories(categoryId, categories);\n\n  return (\n    <>\n      <Form.Item label=\"Категорія\" name=\"categoryId\" rules={[requiredRule]}>\n        <Select\n          showSearch\n          filterOption={(input, option) =>\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n        >\n          {categories.map(({ name, _id }) => (\n            <Select.Option key={_id} value={_id}>\n              {name}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n      {subcategories && (\n        <Form.Item label=\"Підкатегорія\" name=\"subcategoryId\">\n          <Select\n            allowClear={true}\n            showSearch\n            filterOption={(input, option) =>\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n          >\n            {subcategories.map(({ name, _id }) => (\n              <Select.Option key={_id} value={_id}>\n                {name}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n      )}\n    </>\n  );\n};\n\nexport const ProductForm = ({ onFinish, initialValues = {} }) => {\n  const { categoryId, onValuesChange } = useCategoryId(initialValues);\n\n  return (\n    <Form\n      onValuesChange={onValuesChange}\n      name=\"productForm\"\n      onFinish={onFinish}\n      layout={\"vertical\"}\n      initialValues={initialValues}\n    >\n      <Form.Item\n        label=\"Номенклатура\"\n        name=\"nomenclature\"\n        rules={[requiredRule]}\n      >\n        <Input />\n      </Form.Item>\n      <ArticleInputItem />\n      <FlexWrapper>\n        <Form.Item label=\"Залишок\" name=\"count\" rules={[requiredRule]}>\n          <InputNumber min={0} />\n        </Form.Item>\n        <Form.Item label=\"Закупка\" name=\"price\" rules={[requiredRule]}>\n          <InputNumber min={0} />\n        </Form.Item>\n        <MarkupInputItem />\n      </FlexWrapper>\n\n      <CategorySelectItem categoryId={categoryId} />\n      <SubmitBtnItem />\n    </Form>\n  );\n};\n","import * as R from \"ramda\";\n\n// isSubcategoryNill :: Category -> Boolean\nconst isSubcategoryNill = R.compose(R.isNil, R.prop(\"subcategoryId\"));\n\n// removeSubcategoriIsNeed :: ProductFormData -> ProductInput\nexport const removeSubcategoriIsNeed = R.when(\n  isSubcategoryNill,\n  R.dissoc(\"subcategoryId\")\n);\n\nexport const prepareCategoryId = R.converge(R.mergeRight, [\n  R.identity,\n  R.applySpec({\n    categoryId: R.path([\"category\", \"_id\"]),\n  }),\n]);\n\n// prepareProductInitialValues :: QueryProductData -> InitialProductValue\nexport const prepareProductInitialValues = R.compose(\n  prepareCategoryId,\n  R.dissoc(\"__typename\"),\n  R.propOr({}, \"product\")\n);\n\n// prepareProductBeforeSubmit :: ProductFormData -> ProductInput\nexport const prepareProductBeforeSubmit = R.when(\n  isSubcategoryNill,\n  R.mergeLeft({ subcategoryId: null })\n);\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { ProductForm } from \"./ProductForm\";\nimport { removeSubcategoriIsNeed } from \"./utils\";\n\nconst ADD_PRODUCT_MUTATION = gql`\n  mutation createProduct($input: ProductInput!) {\n    createProduct(input: $input) {\n      _id\n    }\n  }\n`;\n\nexport const AddProductForm = ({ closeModal, refetch }) => {\n  const [addProduct] = useMutation(ADD_PRODUCT_MUTATION);\n\n  const handleSubmit = async (values) => {\n    try {\n      await addProduct({\n        variables: {\n          input: removeSubcategoriIsNeed(values),\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return <ProductForm onFinish={handleSubmit} />;\n};\n","import { useMutation, useQuery, gql } from \"@apollo/client\";\n\nimport { ProductForm } from \"./ProductForm\";\nimport {\n  prepareProductBeforeSubmit,\n  prepareProductInitialValues,\n} from \"./utils\";\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation updateProduct($id: ID!, $update: ProductInput!) {\n    updateProduct(id: $id, update: $update) {\n      _id\n    }\n  }\n`;\n\nconst PRODUCT_QUERY = gql`\n  query product($id: ID!) {\n    product(id: $id) {\n      _id\n      nomenclature\n      article\n      count\n      price\n      subcategoryId\n      markup\n      category {\n        _id\n        name\n        markup\n        subcategories {\n          _id\n          name\n          markup\n        }\n      }\n    }\n  }\n`;\n\nexport const EditProductForm = ({ id, closeModal, refetch }) => {\n  const [updateProduct] = useMutation(UPDATE_PRODUCT_MUTATION);\n\n  const { data, loading } = useQuery(PRODUCT_QUERY, {\n    variables: { id },\n    fetchPolicy: \"network-only\",\n  });\n\n  if (loading) return null;\n\n  const initialValues = prepareProductInitialValues(data);\n\n  const handleSubmit = async (values) => {\n    try {\n      await updateProduct({\n        variables: {\n          id,\n          update: prepareProductBeforeSubmit(values),\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return <ProductForm onFinish={handleSubmit} initialValues={initialValues} />;\n};\n","import { Table } from \"antd\";\n\nexport const ProductShortTable = ({ products }) => {\n  const columns = [\n    {\n      title: \"Номенклатура\",\n      dataIndex: \"nomenclature\",\n    },\n    {\n      title: \"Артикул\",\n      dataIndex: \"article\",\n    },\n    {\n      title: \"Залишок\",\n      dataIndex: \"count\",\n    },\n    {\n      title: \"Закупка\",\n      dataIndex: \"price\",\n    },\n  ];\n\n  return (\n    <Table\n      dataSource={products}\n      columns={columns}\n      pagination={false}\n      rowKey=\"nomenclature\"\n    />\n  );\n};\n","import { useQuery, gql } from \"@apollo/client\";\nimport { Form, Input, Select } from \"antd\";\nimport * as R from \"ramda\";\nimport { useState } from \"react\";\n\nimport {\n  ArticleInputItem,\n  requiredRule,\n  SubmitBtnItem,\n} from \"../../../components/Form\";\nimport { ProductShortTable } from \"../../../components/ProductShortTable\";\nimport { CategorySelectItem, useCategoryId } from \"../ProductForm/ProductForm\";\n\n// findSelectetdProduct :: [ID] -> [Products] -> Product\nconst findSelectetdProduct = R.curry((ids, products) =>\n  R.find(R.propEq(\"_id\", R.last(ids)), products)\n);\n\nconst filterSelectedProducts = R.curry((ids, products) =>\n  R.filter(R.compose(R.includes(R.__, ids), R.prop(\"_id\")), products)\n);\n\nconst SEARCH_PRODUCTS = gql`\n  query productsSearch($search: String!) {\n    productsSearch(search: $search) {\n      _id\n      nomenclature\n      article\n      price\n      count\n    }\n  }\n`;\n\nconst ProductSelectItem = ({ initialProducts }) => {\n  const [selectedProducts, setSelectedProducts] = useState(initialProducts);\n\n  const [search, setSearch] = useState(\"\");\n\n  const { data } = useQuery(SEARCH_PRODUCTS, {\n    variables: {\n      search,\n    },\n    skip: search.length < 3,\n  });\n\n  const products = R.uniq([\n    ...R.propOr([], \"productsSearch\", data),\n    ...initialProducts,\n  ]);\n\n  const onSearch = (value) => {\n    setSearch(value);\n  };\n\n  const onChange = (productIds) => {\n    if (productIds.length > selectedProducts.length) {\n      setSelectedProducts([\n        ...selectedProducts,\n        findSelectetdProduct(productIds, products),\n      ]);\n    } else {\n      setSelectedProducts(filterSelectedProducts(productIds, selectedProducts));\n    }\n  };\n\n  return (\n    <>\n      <Form.Item label=\"Продукти\" name=\"productIds\" rules={[requiredRule]}>\n        <Select\n          onChange={onChange}\n          onSearch={onSearch}\n          mode=\"multiple\"\n          filterOption={(input, option) =>\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n        >\n          {products.map((product) => (\n            <Select.Option key={product._id} value={product._id}>\n              {product.nomenclature}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n\n      <ProductShortTable products={selectedProducts} />\n      <br></br>\n    </>\n  );\n};\n\nexport const ProductSetForm = ({\n  onFinish,\n  initialValues = {},\n  initialProducts = [],\n}) => {\n  const { categoryId, onValuesChange } = useCategoryId(initialValues);\n  return (\n    <Form\n      name=\"productForm\"\n      onFinish={onFinish}\n      layout={\"vertical\"}\n      initialValues={initialValues}\n      onValuesChange={onValuesChange}\n    >\n      <Form.Item\n        label=\"Номенклатура\"\n        name=\"nomenclature\"\n        rules={[requiredRule]}\n      >\n        <Input />\n      </Form.Item>\n      <CategorySelectItem categoryId={categoryId} />\n      <ArticleInputItem />\n      <ProductSelectItem initialProducts={initialProducts} />\n      <SubmitBtnItem />\n    </Form>\n  );\n};\n","import { useMutation, gql } from \"@apollo/client\";\nimport { removeSubcategoriIsNeed } from \"../ProductForm/utils\";\n\nimport { ProductSetForm } from \"./ProductSetForm\";\n\nconst ADD_PRODUCT_SET_MUTATION = gql`\n  mutation createProductSet($input: ProductSetInput!) {\n    createProductSet(input: $input) {\n      _id\n    }\n  }\n`;\n\nexport const AddProductSetForm = ({ closeModal, refetch }) => {\n  const [addProductSet] = useMutation(ADD_PRODUCT_SET_MUTATION);\n\n  const handleSubmit = async (values) => {\n    await addProductSet({\n      variables: {\n        input: removeSubcategoriIsNeed(values),\n      },\n    });\n    closeModal();\n    refetch();\n  };\n\n  return <ProductSetForm onFinish={handleSubmit} />;\n};\n","import { useMutation, gql, useQuery } from \"@apollo/client\";\nimport * as R from \"ramda\";\nimport {\n  prepareCategoryId,\n  prepareProductBeforeSubmit,\n} from \"../ProductForm/utils\";\n\nimport { ProductSetForm } from \"./ProductSetForm\";\n\nconst UPDATE_PRODUCT_SET_MUTATION = gql`\n  mutation updateProductSet($id: ID!, $update: ProductSetInput!) {\n    updateProductSet(id: $id, update: $update) {\n      _id\n    }\n  }\n`;\n\nconst PRODUCT_SET_QUERY = gql`\n  query productSet($id: ID!) {\n    productSet(id: $id) {\n      _id\n      nomenclature\n      article\n      products {\n        _id\n        nomenclature\n        article\n        count\n        price\n      }\n      category {\n        _id\n        name\n        subcategories {\n          _id\n          name\n        }\n      }\n      subcategoryId\n    }\n  }\n`;\n\nconst getInitialValues = R.compose(\n  prepareCategoryId,\n  R.converge(R.mergeRight, [\n    R.identity,\n    R.compose(R.objOf(\"productIds\"), R.pluck(\"_id\"), R.propOr([], \"products\")),\n  ]),\n  R.propOr([], \"productSet\")\n);\n\nexport const EditProductSetForm = ({ id, closeModal, refetch }) => {\n  const [updateProductSet] = useMutation(UPDATE_PRODUCT_SET_MUTATION);\n\n  const { data, loading } = useQuery(PRODUCT_SET_QUERY, {\n    variables: { id },\n    fetchPolicy: \"network-only\",\n  });\n\n  if (loading) return null;\n\n  const initialProducts = R.pathOr([], [\"productSet\", \"products\"], data);\n\n  const initialValues = getInitialValues(data);\n\n  const handleSubmit = async (values) => {\n    await updateProductSet({\n      variables: {\n        id,\n        update: prepareProductBeforeSubmit(values),\n      },\n    });\n    closeModal();\n    refetch();\n  };\n\n  return (\n    <ProductSetForm\n      onFinish={handleSubmit}\n      initialValues={initialValues}\n      initialProducts={initialProducts}\n    />\n  );\n};\n","import { Button } from \"antd\";\nimport { ProductShortTable } from \"../../../components/ProductShortTable\";\nimport styled from \"styled-components\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport * as R from \"ramda\";\n\nconst BtnWrapper = styled.div`\n  padding: 15px 0;\n  display: flex;\n  gap: 10px;\n`;\n\nconst UPDATE_PRODUCTS = gql`\n  mutation updateProducts($update: [ProductsInput]!) {\n    updateProducts(update: $update)\n  }\n`;\n\nconst CREATE_PRODUCTS = gql`\n  mutation createProducts($input: [ProductsInput]!) {\n    createProducts(input: $input)\n  }\n`;\n\nexport const UpdatePrice = ({\n  updateProductsItems,\n  diffProducts,\n  setNewPrice,\n  closeModal,\n  refetch,\n}) => {\n  const [createProducts] = useMutation(CREATE_PRODUCTS);\n\n  const [updateProducts, { loading }] = useMutation(UPDATE_PRODUCTS);\n\n  const handleUpdateProducts = async () => {\n    const res = await updateProducts({\n      variables: {\n        update: updateProductsItems,\n      },\n    });\n    await refetch();\n    const count = R.pathOr(0, [\"data\", \"updateProducts\"], res);\n    alert(`Оновлено ${count} продуктів`);\n    setNewPrice([]);\n    closeModal();\n  };\n\n  const handleCreateAndUpdate = async () => {\n    const resCreate = await createProducts({\n      variables: {\n        input: diffProducts,\n      },\n    });\n\n    let resUpdate;\n    if (!R.isEmpty(updateProductsItems)) {\n      resUpdate = await updateProducts({\n        variables: {\n          update: updateProductsItems,\n        },\n      });\n    }\n\n    await refetch();\n    const countUpdate = R.pathOr(0, [\"data\", \"updateProducts\"], resUpdate);\n    const countcareate = R.pathOr(0, [\"data\", \"createProducts\"], resCreate);\n\n    alert(`Оновлено ${countUpdate} продуктів та створено ${countcareate} `);\n    setNewPrice([]);\n    closeModal();\n  };\n\n  return (\n    <>\n      <BtnWrapper>\n        <Button\n          disabled={R.isEmpty(diffProducts)}\n          loading={loading}\n          onClick={handleCreateAndUpdate}\n        >\n          Створити нові та оновити\n        </Button>\n        <Button\n          disabled={R.isEmpty(updateProductsItems)}\n          loading={loading}\n          onClick={handleUpdateProducts}\n        >\n          Тільки оновити існуючі\n        </Button>\n      </BtnWrapper>\n      <h3>Продукти яких немає у базі!</h3>\n      <ProductShortTable products={diffProducts} />\n    </>\n  );\n};\n","import { useMemo, useRef, useState } from \"react\";\nimport XLSX from \"xlsx\";\nimport * as R from \"ramda\";\nimport { Button } from \"antd\";\nimport styled from \"styled-components\";\n\nimport { UpdatePrice } from \"./UpdatePrice\";\n\nconst HiddenInput = styled.input`\n  opacity: 0;\n  width: 0;\n  height: 0;\n`;\n\nconst preparePrice = R.map(\n  R.applySpec({\n    nomenclature: R.propOr(\"\", \"Номенклатура\"),\n    article: R.propOr(\"\", \"Артикул\"),\n    count: R.compose(parseInt, R.propOr(0, \"Залишок\")),\n    price: R.compose(parseFloat, R.propOr(0, \"Закупка\")),\n  })\n);\n\nconst prepareOldPrice = R.map(\n  R.pick([\"nomenclature\", \"article\", \"count\", \"price\"])\n);\n\nconst filterNewItemsDiff = (nomenclatures) =>\n  R.filter(R.compose(R.includes(R.__, nomenclatures), R.prop(\"article\")));\n\nconst filterNewItemsWithOutDiff = (nomenclatures) =>\n  R.filter(\n    R.compose(R.not, R.includes(R.__, nomenclatures), R.prop(\"article\"))\n  );\n\nconst getNomenclatureItemsDiff = (oldPrice, newPrice) =>\n  R.ifElse(\n    R.isEmpty,\n    R.always([]),\n    R.converge(R.difference, [\n      R.pluck(\"article\"),\n      R.always(R.pluck(\"article\", oldPrice)),\n    ])\n  )(newPrice);\nexport const UpdatePriceExcel = ({ oldProductPrice, closeModal, refetch }) => {\n  const [newPrice, setNewPrice] = useState([]);\n\n  const ref = useRef();\n\n  const oldPrice = useMemo(\n    () => prepareOldPrice(oldProductPrice),\n    [oldProductPrice]\n  );\n\n  const nomencaltureDiff = useMemo(\n    () => getNomenclatureItemsDiff(oldPrice, newPrice),\n    [newPrice, oldPrice]\n  );\n\n  const diffProducts = useMemo(\n    () => filterNewItemsDiff(nomencaltureDiff)(newPrice),\n    [newPrice, nomencaltureDiff]\n  );\n\n  const updateProductsItems = useMemo(\n    () => filterNewItemsWithOutDiff(nomencaltureDiff)(newPrice),\n    [newPrice, nomencaltureDiff]\n  );\n\n  const tiggerInput = () => ref.current.click();\n\n  const handleChange = (e) => {\n    const files = e.target.files;\n\n    if (files && files[0]) {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = (e) => {\n        const bstr = e.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? \"binary\" : \"array\",\n          bookVBA: true,\n        });\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        const data = XLSX.utils.sheet_to_json(ws);\n        const preparedData = preparePrice(data);\n        setNewPrice(preparedData);\n      };\n\n      if (rABS) {\n        reader.readAsBinaryString(files[0]);\n      } else {\n        reader.readAsArrayBuffer(files[0]);\n      }\n    }\n  };\n\n  return (\n    <>\n      <HiddenInput ref={ref} type=\"file\" onChange={handleChange} />\n      <Button onClick={tiggerInput}>Вибрати файл</Button>\n      <UpdatePrice\n        updateProductsItems={updateProductsItems}\n        diffProducts={diffProducts}\n        setNewPrice={setNewPrice}\n        closeModal={closeModal}\n        refetch={refetch}\n      />\n    </>\n  );\n};\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { DeleteButton } from \"../../../components/Button\";\nimport { useConfirmDeleteModal } from \"../../../hook/useCinfirmModal\";\nimport { priceTypes } from \"./priceTypes\";\n\nconst DELETE_PRODUCT_MUTATION = gql`\n  mutation deleteProduct($priceId: ID!) {\n    deleteProduct(id: $priceId)\n  }\n`;\n\nconst DELETE_PRODUCTSET_MUTATION = gql`\n  mutation deleteProductSet($priceId: ID!) {\n    deleteProductSet(id: $priceId)\n  }\n`;\n\nexport const DeletePriceBtn = ({ id, nomenclature, refetch, type }) => {\n  const DELETE_MUTATION =\n    type === priceTypes.PRODUCT\n      ? DELETE_PRODUCT_MUTATION\n      : DELETE_PRODUCTSET_MUTATION;\n\n  const [deletePice] = useMutation(DELETE_MUTATION, {\n    variables: { priceId: id },\n  });\n\n  const showDeleteConfirmModal = useConfirmDeleteModal(\n    nomenclature,\n    deletePice,\n    refetch\n  );\n\n  return <DeleteButton onClick={showDeleteConfirmModal} />;\n};\n","import { Button } from \"antd\";\nimport ReactExport from \"react-export-excel\";\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nexport const ExcelExport = ({ price }) => {\n  return (\n    <ExcelFile element={<Button type=\"primary\">Excel Export</Button>}>\n      <ExcelSheet data={price} name=\"Price\">\n        <ExcelColumn label=\"Номенклатура\" value=\"nomenclature\" />\n        <ExcelColumn label=\"Артикул\" value=\"article\" />\n        <ExcelColumn label=\"Залишок\" value=\"count\" />\n        <ExcelColumn label=\"Закупка\" value=\"price\" />\n        <ExcelColumn label=\"Закупка дроп\" value=\"dropPrice\" />\n        <ExcelColumn label=\"Продаж\" value=\"sellingPrice\" />\n        <ExcelColumn label=\"Опт\" value=\"wholesalePrice\" />\n        <ExcelColumn label=\"Тип\" value=\"type\" />\n        <ExcelColumn label=\"Категорія\" value=\"categoryName\" />\n        <ExcelColumn label=\"Під Категорія\" value=\"subcategoryName\" />\n      </ExcelSheet>\n    </ExcelFile>\n  );\n};\n\nexport const ExcelExportPublick = ({ price }) => {\n  return (\n    <ExcelFile element={<Button type=\"primary\">Excel Export</Button>}>\n      <ExcelSheet data={price} name=\"Price\">\n        <ExcelColumn label=\"Номенклатура\" value=\"nomenclature\" />\n        <ExcelColumn label=\"Артикул\" value=\"article\" />\n        <ExcelColumn label=\"Залишок\" value=\"count\" />\n        <ExcelColumn label=\"Закупка дроп\" value=\"dropPrice\" />\n        <ExcelColumn label=\"Продаж\" value=\"sellingPrice\" />\n        <ExcelColumn label=\"Опт\" value=\"wholesalePrice\" />\n        <ExcelColumn label=\"Тип\" value=\"type\" />\n        <ExcelColumn label=\"Категорія\" value=\"categoryName\" />\n        <ExcelColumn label=\"Під Категорія\" value=\"subcategoryName\" />\n      </ExcelSheet>\n    </ExcelFile>\n  );\n};\n","import { Input, Button, Space } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\n\nconst SearchFilter = ({\n  setSelectedKeys,\n  selectedKeys,\n  confirm,\n  clearFilters,\n}) => {\n  return (\n    <div style={{ padding: 8 }}>\n      <Input\n        placeholder=\"Пошук\"\n        value={selectedKeys[0]}\n        onChange={(e) =>\n          setSelectedKeys(e.target.value ? [e.target.value] : [])\n        }\n        onPressEnter={() => confirm()}\n        style={{ marginBottom: 8, display: \"block\" }}\n      />\n      <Space>\n        <Button\n          type=\"primary\"\n          onClick={() => confirm()}\n          icon={<SearchOutlined />}\n          size=\"small\"\n          style={{ width: 90 }}\n        >\n          Знайти\n        </Button>\n        <Button\n          onClick={() => clearFilters()}\n          size=\"small\"\n          style={{ width: 90 }}\n        >\n          Очистити\n        </Button>\n      </Space>\n    </div>\n  );\n};\n\nexport const getColumnSearchProps = (dataIndex) => ({\n  filterDropdown: (props) => <SearchFilter {...props} />,\n  filterIcon: (filtered) => (\n    <SearchOutlined style={{ color: filtered ? \"#1890ff\" : undefined }} />\n  ),\n  onFilter: (value, record) =>\n    record[dataIndex]\n      ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n      : \"\",\n});\n","import { useQuery, gql } from \"@apollo/client\";\nimport { Table, Button } from \"antd\";\nimport {\n  ButtonWrapper,\n  EditButton,\n  SettingsBtn,\n} from \"../../../components/Button\";\nimport { UpdateSettingsForm } from \"../../../components/UpdateSettingsForm\";\n\nimport { useModalContext } from \"../../../providers/ModalProvider\";\nimport { AddProductForm } from \"../ProductForm/AddProductForm\";\nimport { EditProductForm } from \"../ProductForm/EditProductForm\";\nimport { AddProductSetForm } from \"../ProductSetForm.js/AddProductSetForm\";\nimport { EditProductSetForm } from \"../ProductSetForm.js/EditProductSetForm\";\nimport { UpdatePriceExcel } from \"../UpdatePrice/UpdatePriceExcel\";\nimport { DeletePriceBtn } from \"./DeletePriceBtn\";\nimport { ExcelExport } from \"./ExcelExport\";\nimport {\n  preparepProductData,\n  preparedProductSetData,\n  getCategoriesOptions,\n  getCategoryFiletrOptions,\n} from \"./priceTableUtils\";\nimport { priceTypes } from \"./priceTypes\";\nimport { getColumnSearchProps } from \"./textFilter\";\n\nexport const categoryFragment = gql`\n  fragment categoryFragment on Category {\n    _id\n    name\n    markup\n    subcategories {\n      _id\n      name\n      markup\n    }\n  }\n`;\n\nexport const productFragment = gql`\n  fragment productFragment on Product {\n    _id\n    nomenclature\n    article\n    count\n    price\n    subcategoryId\n    markup\n    sellingPrice\n    category {\n      ...categoryFragment\n    }\n  }\n  ${categoryFragment}\n`;\n\nexport const PRODUCTS_QUERY = gql`\n  query {\n    products {\n      ...productFragment\n    }\n    productSets {\n      _id\n      nomenclature\n      article\n      subcategoryId\n      category {\n        ...categoryFragment\n      }\n      products {\n        ...productFragment\n        category {\n          ...categoryFragment\n        }\n      }\n    }\n  }\n  ${productFragment},\n  ${categoryFragment}\n`;\n\nexport const CATEGORY_QUERY = gql`\n  query {\n    categories {\n      name\n      subcategories {\n        name\n      }\n    }\n  }\n`;\n\nexport const PriceTable = () => {\n  const { data, loading, refetch } = useQuery(PRODUCTS_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { data: categoriesData } = useQuery(CATEGORY_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { categories, subCategories } = getCategoriesOptions(categoriesData);\n\n  const productData = preparepProductData(data);\n  const productSetsData = preparedProductSetData(data);\n  const { showModal, handleCancel } = useModalContext();\n\n  const showAddProductForm = () =>\n    showModal({\n      title: \"Додати новий продукт\",\n      content: () => (\n        <AddProductForm closeModal={handleCancel} refetch={refetch} />\n      ),\n    });\n\n  const showSettingsForm = () =>\n    showModal({\n      title: \" Налаштуваня\",\n      content: () => <UpdateSettingsForm closeModal={handleCancel} />,\n    });\n\n  const showAddProductSetForm = () =>\n    showModal({\n      title: \"Додати новий набір\",\n      width: 800,\n      content: () => (\n        <AddProductSetForm closeModal={handleCancel} refetch={refetch} />\n      ),\n    });\n\n  const showEditPriceModal = (id, { nomenclature, type }) => {\n    if (type === priceTypes.PRODUCT) {\n      showModal({\n        title: `Редагувати продукт ${nomenclature}`,\n        content: () => (\n          <EditProductForm\n            closeModal={handleCancel}\n            refetch={refetch}\n            id={id}\n          />\n        ),\n      });\n    } else {\n      showModal({\n        title: `Редагувати набір ${nomenclature}`,\n        width: 800,\n        content: () => (\n          <EditProductSetForm\n            closeModal={handleCancel}\n            refetch={refetch}\n            id={id}\n          />\n        ),\n      });\n    }\n  };\n\n  const showUpdateProductsModal = () => {\n    showModal({\n      title: \"Оновити продукти\",\n      width: 800,\n      content: () => (\n        <UpdatePriceExcel\n          oldProductPrice={productData}\n          closeModal={handleCancel}\n          refetch={refetch}\n        />\n      ),\n    });\n  };\n\n  const columnsConfig = [\n    {\n      title: \"Номенклатура\",\n      dataIndex: \"nomenclature\",\n      ...getColumnSearchProps(\"nomenclature\"),\n    },\n    {\n      title: \"Артикул\",\n      dataIndex: \"article\",\n\n      ...getColumnSearchProps(\"article\"),\n      sorter: (a, b) => a.article.localeCompare(b.article),\n    },\n    {\n      title: \"Залишок\",\n      dataIndex: \"count\",\n      sorter: (a, b) => b.count - a.count,\n    },\n    {\n      title: \"Закупка моя\",\n      dataIndex: \"price\",\n      sorter: (a, b) => b.price - a.price,\n    },\n    {\n      title: \"Закупка\",\n      dataIndex: \"dropPrice\",\n      sorter: (a, b) => b.dropPrice - a.dropPrice,\n    },\n    {\n      title: \"Продаж\",\n      dataIndex: \"sellingPrice\",\n      sorter: (a, b) => b.sellingPrice - a.sellingPrice,\n    },\n    {\n      title: \"Опт\",\n      dataIndex: \"wholesalePrice\",\n      sorter: (a, b) => b.wholesalePrice - a.wholesalePrice,\n    },\n    {\n      title: \"Тип\",\n      dataIndex: \"type\",\n      filters: [\n        {\n          text: priceTypes.PRODUCT,\n          value: priceTypes.PRODUCT,\n        },\n        {\n          text: priceTypes.PRODUCT_SET,\n          value: priceTypes.PRODUCT_SET,\n        },\n      ],\n      onFilter: (value, { type }) => type === value,\n    },\n    {\n      title: \"Категорія\",\n      dataIndex: \"categoryName\",\n      filters: getCategoryFiletrOptions(categories),\n      onFilter: (value, { categoryName }) => categoryName === value,\n    },\n    {\n      title: \"Під Категорія\",\n      dataIndex: \"subcategoryName\",\n      filters: getCategoryFiletrOptions(subCategories),\n      onFilter: (value, { subcategoryName }) => subcategoryName === value,\n    },\n    {\n      dataIndex: \"_id\",\n      render: (id, price) => (\n        <ButtonWrapper>\n          <EditButton onClick={() => showEditPriceModal(id, price)} />\n          <DeletePriceBtn\n            refetch={refetch}\n            id={id}\n            nomenclature={price.nomenclature}\n            type={price.type}\n          />\n        </ButtonWrapper>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <ButtonWrapper>\n        <Button type=\"primary\" onClick={showAddProductForm}>\n          Додати продукт\n        </Button>\n        <Button type=\"primary\" onClick={showAddProductSetForm}>\n          Додати набір\n        </Button>\n        <ExcelExport price={[...productData, ...productSetsData]} />\n\n        <Button type=\"primary\" onClick={showUpdateProductsModal}>\n          Оновити продукти\n        </Button>\n\n        <p>Продуктів: {productData.length} шт. </p>\n        <p>Наборів: {productSetsData.length} шт. </p>\n        <SettingsBtn onClick={showSettingsForm} />\n      </ButtonWrapper>\n\n      <Table\n        columns={columnsConfig}\n        dataSource={[...productData, ...productSetsData]}\n        loading={loading}\n        rowKey=\"_id\"\n        pagination={{ showTotal: (total) => `Кількість ${total} шт.` }}\n        size=\"small\"\n      />\n    </>\n  );\n};\n","import { Form, Input, Button, Space, InputNumber } from \"antd\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport {\n  MarkupInputItem,\n  requiredRule,\n  SubmitBtnItem,\n} from \"../../../components/Form\";\n\nexport const CategoryForm = ({ onFinish, initialValues = {} }) => {\n  return (\n    <Form\n      name=\"categoryForm\"\n      onFinish={onFinish}\n      layout={\"vertical\"}\n      initialValues={initialValues}\n    >\n      <Form.Item label=\"Назва\" name=\"name\" rules={[requiredRule]}>\n        <Input />\n      </Form.Item>\n      <MarkupInputItem />\n      <Form.List name=\"subcategories\">\n        {(fields, { add, remove }) => (\n          <>\n            {fields.map((field) => (\n              <Space key={field.key} align=\"baseline\">\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.area !== curValues.area ||\n                    prevValues.sights !== curValues.sights\n                  }\n                >\n                  {() => (\n                    <Form.Item\n                      {...field}\n                      label=\"Назва\"\n                      name={[field.name, \"name\"]}\n                      fieldKey={[field.fieldKey, \"sight\"]}\n                      rules={[requiredRule]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  )}\n                </Form.Item>\n                <Form.Item\n                  {...field}\n                  label=\"Націнка\"\n                  name={[field.name, \"markup\"]}\n                  fieldKey={[field.fieldKey, \"markup\"]}\n                >\n                  <InputNumber />\n                </Form.Item>\n\n                <MinusCircleOutlined onClick={() => remove(field.name)} />\n              </Space>\n            ))}\n            <Form.Item>\n              <Button\n                type=\"dashed\"\n                onClick={() => add()}\n                block\n                icon={<PlusOutlined />}\n              >\n                Додати підкатегорію\n              </Button>\n            </Form.Item>\n          </>\n        )}\n      </Form.List>\n      <SubmitBtnItem />\n    </Form>\n  );\n};\n","import * as R from \"ramda\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// isCategoryNotHaveSubcategory :: Category -> Boolean\nconst isCategoryNotHaveSubcategory = R.compose(\n  R.isNil,\n  R.prop(\"subcategories\")\n);\n\n// prepareCategory :: Function -> CategoryFormData -> SubmitCategory\nconst prepareCategory = (prepareSubcategory) =>\n  R.ifElse(\n    isCategoryNotHaveSubcategory,\n    R.dissoc(\"subcategories\"),\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.compose(\n        R.objOf(\"subcategories\"),\n        R.map(prepareSubcategory),\n        R.prop(\"subcategories\")\n      ),\n    ])\n  );\n\n// populateSubcategoryWithId :: SubcategoryFormData -> SubcategoryInput\nconst populateSubcategoryWithId = R.applySpec({\n  _id: () => uuidv4(),\n  name: R.prop(\"name\"),\n  markup: R.prop(\"markup\"),\n});\n\n// populateSubcategoryWithIdIfNeed :: SubcategoryFormData -> SubcategoryUpdate\nconst populateSubcategoryWithIdIfNeed = R.ifElse(\n  R.compose(R.isNil, R.prop(\"_id\")),\n  populateSubcategoryWithId,\n  R.identity\n);\n\n// prepareCreateCategoryBeforSubmit :: FormDataInput -> CategoryInput\nexport const prepareCreateCategoryBeforSubmit = prepareCategory(\n  populateSubcategoryWithId\n);\n\n// prepareUpdateCategoryBeforSubmit :: FormDataInput -> CategoryUpdate\nexport const prepareUpdateCategoryBeforSubmit = prepareCategory(\n  populateSubcategoryWithIdIfNeed\n);\n\n// prepareCategoryIntialValues :: CategotyData -> CategoryIntialValues\nexport const prepareCategoryIntialValues = R.compose(\n  R.unless(\n    isCategoryNotHaveSubcategory,\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.compose(\n        R.objOf(\"subcategories\"),\n        R.map(R.dissoc(\"__typename\")),\n        R.prop(\"subcategories\")\n      ),\n    ])\n  ),\n  R.dissoc(\"__typename\"),\n  R.propOr({}, \"category\")\n);\n","import { useMutation, gql, useQuery } from \"@apollo/client\";\n\nimport { categoryFragment } from \"../../price/PriceTable/PriceTable\";\nimport { CategoryForm } from \"./CategoryForm\";\nimport {\n  prepareCategoryIntialValues,\n  prepareUpdateCategoryBeforSubmit,\n} from \"./utils\";\n\nconst UPDATE_CATEGORY_MUTATION = gql`\n  mutation updateCategory($updateCategoryId: ID!, $update: CategoryInput!) {\n    updateCategory(id: $updateCategoryId, update: $update) {\n      _id\n    }\n  }\n`;\n\nconst CATEGORY_QUERY = gql`\n  query category($id: ID!) {\n    category(id: $id) {\n      ...categoryFragment\n    }\n  }\n  ${categoryFragment}\n`;\n\nexport const EditCategoryForm = ({ id, closeModal, refetch }) => {\n  const { data, loading } = useQuery(CATEGORY_QUERY, {\n    variables: { id },\n    fetchPolicy: \"network-only\",\n  });\n\n  const initialValues = prepareCategoryIntialValues(data);\n\n  const [updateCategory] = useMutation(UPDATE_CATEGORY_MUTATION);\n\n  const handleSubmit = async (values) => {\n    try {\n      await updateCategory({\n        variables: {\n          updateCategoryId: id,\n          update: prepareUpdateCategoryBeforSubmit(values),\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  if (loading) return null;\n\n  return <CategoryForm onFinish={handleSubmit} initialValues={initialValues} />;\n};\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { CategoryForm } from \"./CategoryForm\";\nimport { prepareCreateCategoryBeforSubmit } from \"./utils\";\n\nconst ADD_CATEGORY_MUTATION = gql`\n  mutation createCategory($input: CategoryInput!) {\n    createCategory(input: $input) {\n      _id\n    }\n  }\n`;\n\nexport const AddCategoryForm = ({ closeModal, refetch }) => {\n  const [addCategory] = useMutation(ADD_CATEGORY_MUTATION);\n\n  const handleSubmit = async (values) => {\n    try {\n      await addCategory({\n        variables: {\n          input: prepareCreateCategoryBeforSubmit(values),\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return <CategoryForm onFinish={handleSubmit} />;\n};\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { DeleteButton } from \"../../../components/Button\";\nimport { useConfirmDeleteModal } from \"../../../hook/useCinfirmModal\";\n\nconst DELETE_CATEGORY_MUTATION = gql`\n  mutation deleteCategory($categoryId: ID!) {\n    deleteCategory(id: $categoryId)\n  }\n`;\n\nexport const DeleteCategoryBtn = ({ id, categoryName, refetch }) => {\n  const [deleteCategory] = useMutation(DELETE_CATEGORY_MUTATION, {\n    variables: { categoryId: id },\n  });\n\n  const showDeleteConfirmModal = useConfirmDeleteModal(\n    categoryName,\n    deleteCategory,\n    refetch\n  );\n\n  return <DeleteButton onClick={showDeleteConfirmModal} />;\n};\n","import * as R from \"ramda\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Table, Button } from \"antd\";\n\nimport { EditCategoryForm } from \"../CategoryForm/EditCategoryForm\";\nimport { ButtonWrapper, EditButton } from \"../../../components/Button\";\nimport { AddCategoryForm } from \"../CategoryForm/AddCategoryForm\";\nimport { useModalContext } from \"../../../providers/ModalProvider\";\nimport { DeleteCategoryBtn } from \"./DeleteCategoryBtn\";\nimport { categoryFragment } from \"../../price/PriceTable/PriceTable\";\n\nexport const CATEGORIES_QUERY = gql`\n  query {\n    categories {\n      ...categoryFragment\n    }\n  }\n  ${categoryFragment}\n`;\n\n// isSubcategory :: Object -> Boolean\nconst isSubcategory = R.propEq(\"__typename\", \"Subcategory\");\n\n// prepareCategoryData :: QueryData -> [Category]\nconst prepareCategoryData = R.compose(\n  R.map(\n    R.unless(\n      R.compose(R.either(R.isNil, R.isEmpty), R.prop(\"subcategories\")),\n      R.converge(R.mergeRight, [\n        R.dissoc(\"subcategories\"),\n        R.compose(R.objOf(\"children\"), R.prop(\"subcategories\")),\n      ])\n    )\n  ),\n  R.propOr([], \"categories\")\n);\n\nexport const CategoryTable = () => {\n  const { data, loading, refetch } = useQuery(CATEGORIES_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { showModal, handleCancel } = useModalContext();\n\n  const categories = prepareCategoryData(data);\n\n  const showAddCategoryModal = () =>\n    showModal({\n      title: \"Додати нову категорію\",\n      content: () => (\n        <AddCategoryForm closeModal={handleCancel} refetch={refetch} />\n      ),\n    });\n\n  const showEditCategoryModal = (id, categoryName) =>\n    showModal({\n      title: `Редагувати категорію ${categoryName}`,\n      content: () => (\n        <EditCategoryForm closeModal={handleCancel} refetch={refetch} id={id} />\n      ),\n    });\n\n  const columnsConfig = [\n    {\n      title: \"Назва\",\n      dataIndex: \"name\",\n    },\n    {\n      title: \"Націнка\",\n      dataIndex: \"markup\",\n    },\n    {\n      dataIndex: \"_id\",\n      render: (id, category) =>\n        isSubcategory(category) ? null : (\n          <ButtonWrapper>\n            <EditButton\n              onClick={() => showEditCategoryModal(id, category.name)}\n            />\n            <DeleteCategoryBtn\n              refetch={refetch}\n              id={id}\n              categoryName={category.name}\n            />\n          </ButtonWrapper>\n        ),\n    },\n  ];\n\n  return (\n    <>\n      <ButtonWrapper>\n        <Button type=\"primary\" onClick={showAddCategoryModal}>\n          Додати категорію\n        </Button>\n      </ButtonWrapper>\n\n      <Table\n        columns={columnsConfig}\n        dataSource={categories}\n        loading={loading}\n        rowKey=\"_id\"\n        pagination={false}\n        size=\"small\"\n      />\n    </>\n  );\n};\n","import * as R from \"ramda\";\nimport { Form, Input, Button } from \"antd\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport { useNavigate } from \"react-router\";\nimport { routes } from \"../../routes/config\";\n\nexport const LOGIN_MUTATION = gql`\n  mutation LOGIN_MUTATION($input: LoginInput!) {\n    login(input: $input) {\n      token\n    }\n  }\n`;\n\nexport const LoginForm = () => {\n  const [login] = useMutation(LOGIN_MUTATION);\n  const navigate = useNavigate();\n\n  const onFinish = async (values) => {\n    try {\n      const response = await login({\n        variables: {\n          input: values,\n        },\n      });\n\n      const token = R.pathOr(\"\", [\"data\", \"login\", \"token\"], response);\n      localStorage.setItem(\"token\", token);\n\n      setTimeout(() => navigate(routes.home), 500);\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return (\n    <Form\n      name=\"basic\"\n      labelCol={{\n        span: 8,\n      }}\n      wrapperCol={{\n        span: 16,\n      }}\n      initialValues={{\n        remember: true,\n      }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item\n        label=\"Користувач\"\n        name=\"username\"\n        rules={[\n          {\n            required: true,\n            message: \"Ім'я користувача обов'язкове!\",\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Пароль\"\n        name=\"password\"\n        rules={[\n          {\n            required: true,\n            message: \"Пароль обов'язковий!\",\n          },\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        wrapperCol={{\n          offset: 8,\n          span: 16,\n        }}\n      >\n        <Button type=\"primary\" htmlType=\"submit\">\n          Увійти\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n","import styled from \"styled-components\";\nimport { LoginForm } from \"./LoginForm\";\n\nconst Wrapper = styled.div`\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const LoginPage = () => {\n  return (\n    <Wrapper>\n      <LoginForm />\n    </Wrapper>\n  );\n};\n","import { useState } from \"react\";\n\nimport { useQuery } from \"@apollo/client\";\nimport { Form, Select, Space, Input, InputNumber } from \"antd\";\nimport * as R from \"ramda\";\nimport { requiredRule } from \"../../../components/Form\";\nimport {\n  preparedProductSetData,\n  preparepProductData,\n  roundToKopeck,\n} from \"../../price/PriceTable/priceTableUtils\";\nimport { useUserContext } from \"../../../providers/UserProvider\";\nimport { SEARCH_PRODUCTS } from \"../../batchOrder/form/ProductItems\";\n\nconst filterSelectedProducts = R.curry((ids, products) =>\n  R.filter(R.compose(R.includes(R.__, ids), R.prop(\"_id\")), products)\n);\n\nconst calculateTotal = R.compose(\n  R.applySpec({\n    products: R.identity,\n    totalPrice: R.compose(\n      roundToKopeck,\n      R.sum,\n      R.map(R.propOr(0, \"totalPrice\"))\n    ),\n\n    totalSellPrice: R.compose(\n      roundToKopeck,\n      R.sum,\n      R.map(R.propOr(0, \"totalSellingPrice\"))\n    ),\n  }),\n  R.map(\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.applySpec({\n        totalPrice: R.converge(R.multiply, [R.prop(\"price\"), R.prop(\"count\")]),\n\n        totalSellingPrice: R.converge(R.multiply, [\n          R.prop(\"sellingPrice\"),\n          R.prop(\"count\"),\n        ]),\n      }),\n    ])\n  )\n);\n\nconst prepareProductData = R.compose(\n  preparepProductData,\n  R.objOf(\"products\"),\n  R.map(\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.applySpec({ count: R.propOr(1, \"count\") }),\n    ])\n  ),\n  R.propOr([], \"productsSearch\")\n);\n\nconst preparedProductSetsData = R.compose(\n  R.map(\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.applySpec({\n        count: R.ifElse(R.propEq(\"count\", \"-\"), R.always(1), R.prop(\"count\")),\n      }),\n    ])\n  ),\n  preparedProductSetData,\n  R.objOf(\"productSets\"),\n\n  R.propOr([], \"productSetSearch\")\n);\n\nexport const ProductItems = ({ form, initialProducts = [] }) => {\n  const { user } = useUserContext();\n\n  const isAdmin = user.role === \"ADMIN\";\n  const [selectedProducts, setSelectedProducts] = useState(initialProducts);\n\n  const [search, setSearch] = useState(\"\");\n\n  const { data } = useQuery(SEARCH_PRODUCTS, {\n    variables: {\n      search,\n    },\n    skip: search.length < 3,\n  });\n\n  const onSearch = (value) => {\n    setSearch(value);\n  };\n\n  const onChange = (productIds) => {\n    let newProducts = [];\n\n    if (productIds.length > selectedProducts.length) {\n      const productItems = prepareProductData(data);\n      const setProductsItems = preparedProductSetsData(data);\n      console.log({ setProductsItems, data });\n      const selectedProduct = R.find(R.propEq(\"_id\", R.last(productIds)), [\n        ...productItems,\n        ...setProductsItems,\n      ]);\n      newProducts = [...selectedProducts, selectedProduct];\n    } else {\n      newProducts = filterSelectedProducts(productIds, selectedProducts);\n    }\n\n    const newFormCalculateData = calculateTotal(newProducts);\n\n    form.setFieldsValue(newFormCalculateData);\n    setSelectedProducts(newFormCalculateData.products);\n  };\n\n  const onCountChanged = () => {\n    const products = form.getFieldValue(\"products\");\n    const newFormData = calculateTotal(products);\n    form.setFieldsValue(newFormData);\n    setSelectedProducts(newFormData.products);\n  };\n\n  const products = R.uniq([\n    ...R.propOr([], \"productsSearch\", data),\n    ...R.propOr([], \"productSetSearch\", data),\n    ...initialProducts,\n  ]);\n\n  return (\n    <>\n      <Form.Item label=\"Продукти(Артикул)\" name=\"productIds\">\n        <Select\n          onChange={onChange}\n          onSearch={onSearch}\n          mode=\"multiple\"\n          filterOption={(input, option) =>\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n        >\n          {products.map((product) => (\n            <Select.Option key={product._id} value={product._id}>\n              {product.article}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n\n      <Form.List name=\"products\">\n        {(fields, { add, remove }) => (\n          <>\n            {fields.map((field) => (\n              <Space key={field.key} align=\"baseline\">\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.area !== curValues.area ||\n                    prevValues.sights !== curValues.sights\n                  }\n                >\n                  {() => (\n                    <Form.Item\n                      {...field}\n                      label=\"Номенклатура\"\n                      name={[field.name, \"nomenclature\"]}\n                      fieldKey={[field.fieldKey, \"nomenclature\"]}\n                      rules={[requiredRule]}\n                    >\n                      <Input disabled={true} />\n                    </Form.Item>\n                  )}\n                </Form.Item>\n                <Form.Item\n                  {...field}\n                  label=\"Ціна продаж\"\n                  name={[field.name, \"sellingPrice\"]}\n                  fieldKey={[field.fieldKey, \"sellingPrice\"]}\n                  rules={[requiredRule]}\n                  onChange={onCountChanged}\n                >\n                  <InputNumber disabled={!isAdmin} />\n                </Form.Item>\n                <Form.Item\n                  {...field}\n                  label=\"Кількість\"\n                  name={[field.name, \"count\"]}\n                  fieldKey={[field.fieldKey, \"count\"]}\n                  rules={[requiredRule]}\n                  onChange={onCountChanged}\n                >\n                  <InputNumber />\n                </Form.Item>\n              </Space>\n            ))}\n          </>\n        )}\n      </Form.List>\n\n      <br></br>\n    </>\n  );\n};\n","import { Form, Input, InputNumber, Space, Select, DatePicker } from \"antd\";\nimport * as R from \"ramda\";\n\nimport { requiredRule, SubmitBtnItem } from \"../../../components/Form\";\nimport { useUserContext } from \"../../../providers/UserProvider\";\nimport { ORDER_STATUSES } from \"../../batchOrder/form/OrderForm\";\nimport { ProductItems } from \"./ProductItems\";\n\nexport const OWN_ORDER_STATUSES = {\n  ...ORDER_STATUSES,\n  RETURNED: \"Повернено\",\n};\n\nexport const OwnOrderForm = ({\n  onFinish,\n  initialValues,\n  initialProducts = [],\n}) => {\n  const [form] = Form.useForm();\n  const { user } = useUserContext();\n  const isAdmin = user.role === \"ADMIN\";\n\n  return (\n    <Form\n      form={form}\n      name=\"orderForm\"\n      onFinish={onFinish}\n      layout={\"vertical\"}\n      initialValues={initialValues}\n    >\n      <Form.Item name=\"date\" label=\"Дата\" rules={[requiredRule]}>\n        <DatePicker />\n      </Form.Item>\n      <Form.Item label=\"ТТН\" name=\"ttn\">\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Статус\"\n        name=\"status\"\n        initialValue={OWN_ORDER_STATUSES.PAID_BEFORE}\n      >\n        <Select>\n          {R.values(OWN_ORDER_STATUSES).map((status) => (\n            <Select.Option key={status} value={status}>\n              {status}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n      <Form.Item label=\"Коментар\" name=\"buyerInfo\">\n        <Input />\n      </Form.Item>\n      <ProductItems form={form} initialProducts={initialProducts} />\n      <Form.Item name=\"payed\" label=\"Оплачено\">\n        <InputNumber min={0} />\n      </Form.Item>\n\n      <Space>\n        <Form.Item\n          name=\"totalPrice\"\n          label=\"Сума закупка моя\"\n          rules={[requiredRule]}\n          initialValue={0}\n        >\n          <InputNumber min={0} disabled={!isAdmin} />\n        </Form.Item>\n        <Form.Item\n          name=\"totalSellPrice\"\n          label=\"Сума продаж\"\n          rules={[requiredRule]}\n          initialValue={0}\n        >\n          <InputNumber min={0} disabled={!isAdmin} />\n        </Form.Item>\n      </Space>\n\n      <SubmitBtnItem />\n    </Form>\n  );\n};\n","import { useMutation, gql } from \"@apollo/client\";\nimport * as R from \"ramda\";\nimport { roundToKopeck } from \"../../price/PriceTable/priceTableUtils\";\nimport { OwnOrderForm } from \"./OwnOrderForm\";\n\nconst CREATE_OWN_ORDER = gql`\n  mutation createOwnOrder($input: OwnOrderInput!) {\n    createOwnOrder(input: $input) {\n      _id\n    }\n  }\n`;\n\nexport const prepareValuesBeforeSubmit = R.compose(\n  R.converge(R.mergeRight, [\n    R.identity,\n    R.compose(\n      R.objOf(\"products\"),\n      R.map(\n        R.applySpec({\n          _id: R.prop(\"_id\"),\n          article: R.prop(\"article\"),\n          count: R.prop(\"count\"),\n          price: R.compose(roundToKopeck, R.prop(\"price\")),\n          sellingPrice: R.compose(roundToKopeck, R.prop(\"sellingPrice\")),\n          nomenclature: R.prop(\"nomenclature\"),\n        })\n      ),\n      R.propOr([], \"products\")\n    ),\n  ]),\n  R.dissoc(\"productIds\")\n);\n\nexport const AddOwnOrdersForm = ({ closeModal, refetch }) => {\n  const [createOwnOrder] = useMutation(CREATE_OWN_ORDER);\n\n  const handleSubmit = async (values) => {\n    try {\n      await createOwnOrder({\n        variables: {\n          input: prepareValuesBeforeSubmit(values),\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return <OwnOrderForm onFinish={handleSubmit} />;\n};\n","import { useMutation, gql } from \"@apollo/client\";\nimport * as R from \"ramda\";\nimport moment from \"moment\";\n\nimport { prepareValuesBeforeSubmit } from \"./AddOwnOrderForm\";\nimport { OwnOrderForm } from \"./OwnOrderForm\";\n\nconst UPDATE__OWN_ORDER = gql`\n  mutation updateOwnOrder($id: ID!, $update: OwnOrderInput!) {\n    updateOwnOrder(id: $id, update: $update) {\n      _id\n    }\n  }\n`;\n\nconst getProductIds = R.compose(R.map(R.prop(\"_id\")), R.propOr([], \"products\"));\n\nexport const UpdateOwnOrdersForm = ({ closeModal, refetch, order }) => {\n  const [updateOwnOrder] = useMutation(UPDATE__OWN_ORDER);\n\n  const productIds = getProductIds(order);\n\n  const initialValues = { ...order, productIds, date: moment(order.date) };\n\n  const initialProducts = R.propOr([], \"products\", order);\n\n  const handleSubmit = async (values) => {\n    try {\n      updateOwnOrder({\n        variables: {\n          id: order._id,\n          update: { ...prepareValuesBeforeSubmit(values) },\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return (\n    <OwnOrderForm\n      onFinish={handleSubmit}\n      initialValues={initialValues}\n      initialProducts={initialProducts}\n    />\n  );\n};\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { DeleteButton } from \"../../../components/Button\";\nimport { useConfirmDeleteModal } from \"../../../hook/useCinfirmModal\";\n\nconst DELETE_OWN_ORDER_MUTATION = gql`\n  mutation removeOwnOrder($id: ID!) {\n    removeOwnOrder(id: $id)\n  }\n`;\n\nexport const DeleteOwnOrderBtn = ({ id, refetch }) => {\n  const [removeOwnOrder] = useMutation(DELETE_OWN_ORDER_MUTATION, {\n    variables: { id },\n  });\n\n  const showDeleteConfirmModal = useConfirmDeleteModal(\n    \"замовлення\",\n    removeOwnOrder,\n    refetch\n  );\n\n  return <DeleteButton onClick={showDeleteConfirmModal} />;\n};\n","import { useQuery, gql } from \"@apollo/client\";\nimport { Table, Button, DatePicker } from \"antd\";\nimport * as R from \"ramda\";\nimport moment from \"moment\";\nimport styled from \"styled-components\";\nimport { useModalContext } from \"../../providers/ModalProvider\";\n\nimport { UpdateOwnOrdersForm } from \"./form/UpdateOwnOrdersForm\";\nimport {\n  ButtonWrapper,\n  EditButton,\n  OrderDetailBtn,\n} from \"../../components/Button\";\nimport { DeleteOwnOrderBtn } from \"./form/DeleteOwnOrderBtn\";\nimport { ProductsOrderTable } from \"../../components/ProductsOrderTable\";\nimport { useState } from \"react\";\nimport { isInCalculateStatus } from \"../batchOrder/BatchOrderTable\";\nimport { AddOwnOrdersForm } from \"./form/AddOwnOrderForm\";\nimport { roundToKopeck } from \"../price/PriceTable/priceTableUtils\";\n\nexport const InfoWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-left: 10px;\n`;\n\nexport const OWN_ORDERS_QUERY = gql`\n  query ownOrders($date: String!) {\n    ownOrders(date: $date) {\n      _id\n      date\n      totalPrice\n      totalSellPrice\n      ttn\n      buyerInfo\n      status\n      payed\n      products {\n        _id\n        article\n        count\n        price\n        sellingPrice\n        nomenclature\n      }\n    }\n  }\n`;\n\nconst calculateOwnOrderProfit = R.compose(\n  roundToKopeck,\n  R.converge(R.subtract, [\n    R.compose(R.sum, R.map(R.propOr(0, \"totalSellPrice\"))),\n    R.compose(R.sum, R.map(R.propOr(0, \"totalPrice\"))),\n  ]),\n  R.filter(isInCalculateStatus)\n);\n\nconst calculatePayed = R.compose(\n  roundToKopeck,\n  R.sum,\n  R.map(R.propOr(0, \"payed\"))\n);\n\nconst calculateTotal = R.compose(\n  roundToKopeck,\n  R.converge(R.subtract, [calculateOwnOrderProfit, calculatePayed])\n);\n\nexport const OwnOrdersPage = () => {\n  const currentMonth = new Date().toISOString().slice(0, 7);\n\n  const [filterDate, setFilterDate] = useState(currentMonth);\n\n  const onChangeDate = (_, dateString) => {\n    setFilterDate(dateString);\n  };\n\n  const { showModal, handleCancel } = useModalContext();\n\n  const { data, loading, refetch } = useQuery(OWN_ORDERS_QUERY, {\n    variables: {\n      date: filterDate,\n    },\n    skip: !filterDate,\n    fetchPolicy: \"network-only\",\n  });\n\n  const orders = R.compose(R.pathOr([], [\"ownOrders\"]))(data);\n\n  const profit = calculateTotal(orders);\n\n  const showAddOrderModal = () =>\n    showModal({\n      title: `Додати нове замовлення до `,\n      content: () => (\n        <AddOwnOrdersForm closeModal={handleCancel} refetch={refetch} />\n      ),\n    });\n\n  const showEditOrderModal = (order) =>\n    showModal({\n      title: `Редагувати замовлення`,\n      content: () => (\n        <UpdateOwnOrdersForm\n          closeModal={handleCancel}\n          refetch={refetch}\n          order={order}\n        />\n      ),\n    });\n\n  const showOrderDetailModal = (products) =>\n    showModal({\n      title: \"Продукти\",\n      width: 1000,\n      content: () => <ProductsOrderTable products={products} type=\"own\" />,\n    });\n\n  const columnsConfig = [\n    {\n      title: \"Дата\",\n      dataIndex: \"date\",\n      render: (value) => moment(value).format(\"YYYY-MM-DD\"),\n    },\n    {\n      title: \"Коментар\",\n      dataIndex: \"buyerInfo\",\n    },\n    {\n      title: \"ТТН\",\n      dataIndex: \"ttn\",\n    },\n    {\n      title: \"Сума закупка моя\",\n      dataIndex: \"totalPrice\",\n    },\n\n    {\n      title: \"Сума продаж\",\n      dataIndex: \"totalSellPrice\",\n    },\n\n    {\n      title: \"Оплачено\",\n      dataIndex: \"payed\",\n    },\n\n    {\n      title: \"Статус\",\n      dataIndex: \"status\",\n    },\n\n    {\n      dataIndex: \"_id\",\n      render: (_, order) => (\n        <ButtonWrapper>\n          <OrderDetailBtn\n            onClick={() =>\n              showOrderDetailModal(R.propOr([], \"products\", order))\n            }\n          />\n          <EditButton onClick={() => showEditOrderModal(order)} />\n          <DeleteOwnOrderBtn id={order._id} refetch={refetch} />\n        </ButtonWrapper>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <InfoWrapper>\n        <DatePicker\n          onChange={onChangeDate}\n          picker=\"month\"\n          defaultValue={moment(currentMonth, \"YYYY/MM\")}\n        />\n        <Button\n          style={{ margin: \"10px\" }}\n          type=\"primary\"\n          onClick={showAddOrderModal}\n        >\n          Додати замовлення\n        </Button>\n\n        <p>Дохід: {profit} грн</p>\n      </InfoWrapper>\n\n      <Table\n        columns={columnsConfig}\n        dataSource={orders}\n        loading={loading}\n        rowKey=\"_id\"\n        pagination={false}\n        size=\"small\"\n        scroll={{ y: 800 }}\n      />\n    </>\n  );\n};\n","import { useQuery } from \"@apollo/client\";\nimport { Table } from \"antd\";\nimport * as R from \"ramda\";\nimport moment from \"moment\";\n\nimport { useParams } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport {\n  BATCH_ORDER_QUERY,\n  calculateBatchOrderTotal,\n} from \"./batchOrder/BatchOrderTable\";\nimport { useModalContext } from \"../providers/ModalProvider\";\nimport { ProductsOrderTable } from \"../components/ProductsOrderTable\";\nimport { OrderDetailBtn } from \"../components/Button\";\n\nconst InfoWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 20px;\n`;\n\nexport const Wrapper = styled.div`\n  padding: 10px;\n`;\n\nexport const PublicBatchOrder = () => {\n  const { batchOrderId } = useParams();\n\n  const { showModal } = useModalContext();\n\n  const { data, loading } = useQuery(BATCH_ORDER_QUERY, {\n    variables: {\n      id: batchOrderId,\n    },\n    skip: !batchOrderId,\n    fetchPolicy: \"network-only\",\n  });\n\n  const batchOrderName = R.pathOr(\"\", [\"batchOrder\", \"name\"], data);\n  const dropBuyerName = R.pathOr(\"\", [\"batchOrder\", \"dropBuyer\", \"name\"], data);\n  const batchMovedTotal = R.pathOr(\"\", [\"batchOrder\", \"movedTotal\"], data);\n\n  const orders = R.compose(\n    R.reverse,\n    R.sortBy(R.prop(\"date\")),\n    R.pathOr([], [\"batchOrder\", \"orders\"])\n  )(data);\n\n  const total = calculateBatchOrderTotal(batchMovedTotal)(orders);\n\n  const showOrderDetailModal = (products) =>\n    showModal({\n      title: \"Продукти\",\n      width: 1000,\n      content: () => (\n        <ProductsOrderTable products={products} type=\"public-drop\" />\n      ),\n    });\n\n  const columnsConfig = [\n    {\n      title: \"Дата\",\n      dataIndex: \"date\",\n      render: (value) => moment(value).format(\"YYYY-MM-DD\"),\n    },\n    {\n      title: \"Коментар\",\n      dataIndex: \"buyerInfo\",\n    },\n    {\n      title: \"ТТН\",\n      dataIndex: \"ttn\",\n    },\n\n    {\n      title: \"Сума закупка\",\n      dataIndex: \"totalDropPrice\",\n    },\n\n    {\n      title: \"Оплачено\",\n      dataIndex: \"payed\",\n    },\n\n    {\n      title: \"Статус\",\n      dataIndex: \"status\",\n    },\n\n    {\n      dataIndex: \"_id\",\n      render: (_, order) => (\n        <OrderDetailBtn\n          onClick={() => showOrderDetailModal(R.propOr([], \"products\", order))}\n        />\n      ),\n    },\n  ];\n\n  return (\n    <Wrapper>\n      <InfoWrapper>\n        <p>Назва: {batchOrderName}</p>\n        <p>Дропшиппер: {dropBuyerName}</p>\n        <p>Перенесено: {batchMovedTotal} грн</p>\n\n        <h3>\n          <b>Баланс: {total} грн</b>\n        </h3>\n      </InfoWrapper>\n\n      <Table\n        columns={columnsConfig}\n        dataSource={orders}\n        loading={loading}\n        rowKey=\"id\"\n        pagination={false}\n        size=\"small\"\n      />\n    </Wrapper>\n  );\n};\n","import { useQuery } from \"@apollo/client\";\nimport { Button, Table } from \"antd\";\nimport * as R from \"ramda\";\nimport { useState } from \"react\";\nimport { Select } from \"antd\";\n\nimport { generatePath, Link, useParams } from \"react-router-dom\";\nimport { routes } from \"../routes/config\";\nimport { BATCH_ORDERS_QUERY } from \"./batchOrders/BatchOrdersTable\";\nimport { Wrapper } from \"./PublicBatchOrder\";\n\nconst { Option } = Select;\n\nexport const PublicBatchOrders = () => {\n  const { dropBuyerId } = useParams();\n  const query = {\n    isActive: true,\n    dropBuyerId,\n  };\n\n  const [internalQuery, setInternalQuery] = useState(query);\n\n  const { data, loading } = useQuery(BATCH_ORDERS_QUERY, {\n    variables: {\n      query: internalQuery,\n    },\n    skip: !internalQuery,\n    fetchPolicy: \"network-only\",\n  });\n\n  const columnsConfig = [\n    {\n      title: \"Назва\",\n      dataIndex: \"name\",\n      render: (name, batchOrder) => {\n        const path = generatePath(\n          `${routes.public}/${routes.publicBatchOrder}`,\n          {\n            batchOrderId: batchOrder._id,\n          }\n        );\n        return <Link to={path}>{name}</Link>;\n      },\n    },\n    {\n      title: \"Дропшиппер\",\n      dataIndex: \"dropBuyer\",\n      render: (dropBuyer) => dropBuyer.name,\n    },\n    {\n      title: \"Активний\",\n      dataIndex: \"isActive\",\n      render: (isActive) => (isActive ? \"Так\" : \"Ні\"),\n    },\n  ];\n\n  const handleChangeBatchFilter = (value) => {\n    setInternalQuery({ ...internalQuery, isActive: value });\n  };\n\n  return (\n    <Wrapper>\n      <Select\n        defaultValue={true}\n        style={{ width: 120, margin: \"10px\" }}\n        onChange={handleChangeBatchFilter}\n      >\n        <Option value={true}>Активні</Option>\n        <Option value={false}>Не активні</Option>\n      </Select>\n      <Button href=\"/price\" type=\"primary\" target=\"_blank\">\n        Прайс\n      </Button>\n      <Table\n        columns={columnsConfig}\n        dataSource={R.compose(\n          R.reverse,\n          R.sortBy(R.prop(\"name\")),\n          R.propOr([], \"batchOrders\")\n        )(data)}\n        loading={loading}\n        rowKey=\"_id\"\n        pagination={false}\n        size=\"small\"\n      />\n    </Wrapper>\n  );\n};\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Table } from \"antd\";\nimport * as R from \"ramda\";\nimport { useState } from \"react\";\nimport { Select } from \"antd\";\nimport moment from \"moment\";\nimport {\n  calculateBatchOrderProfit,\n  InfoWrapper,\n} from \"./batchOrder/BatchOrderTable\";\nimport styled from \"styled-components\";\nimport { useModalContext } from \"../providers/ModalProvider\";\nimport { ProductsOrderTable } from \"../components/ProductsOrderTable\";\nimport { OrderDetailBtn } from \"../components/Button\";\n\nconst { Option } = Select;\n\nconst BATCH_ORDERS_QUERY_STAT = gql`\n  query batchOrdersQuery($query: BatchOrdersQuery!) {\n    batchOrders(query: $query) {\n      _id\n      dropBuyer {\n        _id\n        name\n      }\n      orders {\n        id\n        date\n        totalPrice\n        totalSellPrice\n        totalDropPrice\n        payed\n        ttn\n        buyerInfo\n        status\n        products {\n          _id\n          article\n          count\n          price\n          dropPrice\n          sellingPrice\n          nomenclature\n        }\n      }\n    }\n  }\n`;\n\nconst BATCH_PERIODS = gql`\n  query {\n    batchOrdersPeriods {\n      periods\n    }\n  }\n`;\n\nconst Center = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  font-weight: 700;\n  font-size: 20px;\n`;\n\nconst addDropBuyerToOrder = (batch) =>\n  R.compose(\n    R.map(\n      R.converge(R.mergeRight, [\n        R.identity,\n        R.applySpec({ dropBuyerName: R.always(batch.dropBuyer.name) }),\n      ])\n    ),\n    R.propOr([], \"orders\")\n  )(batch);\n\nconst prepareOrders = R.compose(\n  R.reverse,\n  R.sortBy(R.prop(\"date\")),\n  R.unnest,\n  R.map(addDropBuyerToOrder),\n  R.propOr([], \"batchOrders\")\n);\n\nexport const StatisticPage = () => {\n  const [internalQuery, setInternalQuery] = useState(null);\n\n  const { showModal } = useModalContext();\n\n  const { data: periodsData } = useQuery(BATCH_PERIODS, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { data, loading } = useQuery(BATCH_ORDERS_QUERY_STAT, {\n    variables: {\n      query: internalQuery,\n    },\n    skip: !internalQuery,\n    fetchPolicy: \"network-only\",\n  });\n\n  const periods = R.pathOr([], [\"batchOrdersPeriods\", \"periods\"], periodsData);\n\n  const handleChangeBatchFilter = (value) => {\n    setInternalQuery({ name: value });\n  };\n\n  const orders = prepareOrders(data);\n\n  const profit = calculateBatchOrderProfit(orders);\n\n  const showOrderDetailModal = (products) =>\n    showModal({\n      title: \"Продукти\",\n      width: 1000,\n      content: () => <ProductsOrderTable products={products} type=\"drop\" />,\n    });\n\n  const columnsConfig = [\n    {\n      title: \"Дата\",\n      dataIndex: \"date\",\n      render: (value) => moment(value).format(\"YYYY-MM-DD\"),\n    },\n    {\n      title: \"Коментар\",\n      dataIndex: \"buyerInfo\",\n    },\n    {\n      title: \"ТТН\",\n      dataIndex: \"ttn\",\n    },\n    {\n      title: \"Дропшиппер\",\n      dataIndex: \"dropBuyerName\",\n    },\n\n    {\n      title: \"Сума закупка моя\",\n      dataIndex: \"totalPrice\",\n    },\n    {\n      title: \"Сума закупка\",\n      dataIndex: \"totalDropPrice\",\n    },\n\n    {\n      title: \"Оплачено\",\n      dataIndex: \"payed\",\n    },\n\n    {\n      title: \"Статус\",\n      dataIndex: \"status\",\n    },\n\n    {\n      dataIndex: \"_id\",\n      render: (_, order) => (\n        <OrderDetailBtn\n          onClick={() => showOrderDetailModal(R.propOr([], \"products\", order))}\n        />\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <InfoWrapper>\n        <Select\n          style={{ width: 120, margin: \"10px\" }}\n          onChange={handleChangeBatchFilter}\n        >\n          {periods.map((period) => (\n            <Option key={period} value={period}>\n              {period}\n            </Option>\n          ))}\n        </Select>\n\n        <Center>\n          <>Дохід: {profit} грн</>\n        </Center>\n      </InfoWrapper>\n\n      <Table\n        columns={columnsConfig}\n        dataSource={orders}\n        loading={loading}\n        rowKey=\"id\"\n        pagination={false}\n        size=\"small\"\n      />\n    </>\n  );\n};\n","import { LoginLayout, EmptyLayout } from \"../components/Layouts\";\nimport { MainLayout } from \"../components/MainLayout\";\nimport { BatchOrderPage } from \"../pages/batchOrder/BatchOrderPage\";\nimport { BatchOrdersBuyerPage } from \"../pages/batchOrders/BatchOrdersBuyerPage\";\nimport { BatchOrdersPage } from \"../pages/batchOrders/BatchOrdersPage\";\nimport { CategoryPage } from \"../pages/category/CategoryPage\";\nimport { DropBuyerPage } from \"../pages/dropBuyer/DropBuyerPage\";\nimport { LoginPage } from \"../pages/login/LoginPage\";\nimport { OwnOrdersPage } from \"../pages/OwnOrders/OwnOrdersPage\";\nimport { PricePage } from \"../pages/price/PricePage\";\nimport { PublicPricePage } from \"../pages/price/PublicPricePage\";\nimport { PublicBatchOrder } from \"../pages/PublicBatchOrder\";\nimport { PublicBatchOrders } from \"../pages/PublicBatchOrders\";\nimport { StatisticPage } from \"../pages/StatisticPage\";\n\nexport const routes = {\n  home: \"/\",\n  category: \"/category\",\n  login: \"/login\",\n  price: \"/price\",\n  dropBuyer: \"/drop-buyer\",\n  batchOrders: \"/batch-orders\",\n  batchOrdersBuyer: \"/batch-buyer/:dropBuyerId\",\n  batchOrder: \"/batch-order/:batchOrderId\",\n  public: \"/public\",\n  publicBatchOrder: \"batch-order/:batchOrderId\",\n  publicBatchOrdersBuyer: \"batch-buyer/:dropBuyerId\",\n  statistic: \"/statistic\",\n  ownOrders: \"/own-orders\",\n};\n\nexport const routesConfig = [\n  {\n    Layout: MainLayout,\n    rootPath: routes.home,\n    routes: [\n      {\n        path: routes.home,\n        Component: PricePage,\n      },\n      {\n        path: routes.category,\n        Component: CategoryPage,\n      },\n      {\n        path: routes.dropBuyer,\n        Component: DropBuyerPage,\n      },\n      {\n        path: routes.batchOrders,\n        Component: BatchOrdersPage,\n      },\n      {\n        path: routes.batchOrdersBuyer,\n        Component: BatchOrdersBuyerPage,\n      },\n      {\n        path: routes.batchOrder,\n        Component: BatchOrderPage,\n      },\n      {\n        path: routes.statistic,\n        Component: StatisticPage,\n      },\n      {\n        path: routes.ownOrders,\n        Component: OwnOrdersPage,\n      },\n    ],\n  },\n  {\n    Layout: LoginLayout,\n    rootPath: routes.login,\n    routes: [\n      {\n        index: true,\n        path: routes.login,\n        Component: LoginPage,\n      },\n    ],\n  },\n  {\n    Layout: EmptyLayout,\n    rootPath: routes.price,\n    routes: [\n      {\n        index: true,\n        path: routes.price,\n        Component: PublicPricePage,\n      },\n    ],\n  },\n  {\n    Layout: EmptyLayout,\n    rootPath: routes.public,\n    routes: [\n      {\n        path: routes.publicBatchOrder,\n        Component: PublicBatchOrder,\n      },\n      {\n        path: routes.publicBatchOrdersBuyer,\n        Component: PublicBatchOrders,\n      },\n    ],\n  },\n];\n","import { PriceTable } from \"./PriceTable/PriceTable\";\n\nexport const PricePage = () => <PriceTable />;\n","import { CategoryTable } from \"./CategoryTable/CategoryTable\";\n\nexport const CategoryPage = () => <CategoryTable />;\n","import { DropBuyerTable } from \"./DropBuyerTable\";\n\nexport const DropBuyerPage = () => {\n  return (\n    <div>\n      <DropBuyerTable />\n    </div>\n  );\n};\n","import { useParams } from \"react-router-dom\";\nimport { BatchOrdersTable } from \"./BatchOrdersTable\";\n\nexport const BatchOrdersBuyerPage = () => {\n  const { dropBuyerId } = useParams();\n  const query = {\n    isActive: true,\n    dropBuyerId,\n  };\n  return <BatchOrdersTable query={query} />;\n};\n","import { BatchOrderTable } from \"./BatchOrderTable\";\n\nexport const BatchOrderPage = () => {\n  return <BatchOrderTable />;\n};\n","import { useQuery } from \"@apollo/client\";\nimport { Table } from \"antd\";\nimport { ButtonWrapper } from \"../../components/Button\";\n\nimport { ExcelExportPublick } from \"./PriceTable/ExcelExport\";\nimport { CATEGORY_QUERY, PRODUCTS_QUERY } from \"./PriceTable/PriceTable\";\nimport {\n  preparepProductData,\n  preparedProductSetData,\n  getCategoriesOptions,\n  getCategoryFiletrOptions,\n} from \"./PriceTable/priceTableUtils\";\n\nimport { priceTypes } from \"./PriceTable/priceTypes\";\nimport { getColumnSearchProps } from \"./PriceTable/textFilter\";\n\nexport const PublicPricePage = () => {\n  const { data, loading } = useQuery(PRODUCTS_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { data: categoriesData } = useQuery(CATEGORY_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { categories, subCategories } = getCategoriesOptions(categoriesData);\n\n  const productData = preparepProductData(data);\n  const productSetsData = preparedProductSetData(data);\n\n  const columnsConfig = [\n    {\n      title: \"Номенклатура\",\n      dataIndex: \"nomenclature\",\n      ...getColumnSearchProps(\"nomenclature\"),\n    },\n    {\n      title: \"Артикул\",\n      dataIndex: \"article\",\n      ...getColumnSearchProps(\"article\"),\n    },\n    {\n      title: \"Залишок\",\n      dataIndex: \"count\",\n      sorter: (a, b) => b.count - a.count,\n    },\n    {\n      title: \"Закупка\",\n      dataIndex: \"dropPrice\",\n      sorter: (a, b) => b.dropPrice - a.dropPrice,\n    },\n    {\n      title: \"Продаж\",\n      dataIndex: \"sellingPrice\",\n      sorter: (a, b) => b.sellingPrice - a.sellingPrice,\n    },\n    {\n      title: \"Опт\",\n      dataIndex: \"wholesalePrice\",\n      sorter: (a, b) => b.wholesalePrice - a.wholesalePrice,\n    },\n    {\n      title: \"Тип\",\n      dataIndex: \"type\",\n      filters: [\n        {\n          text: priceTypes.PRODUCT,\n          value: priceTypes.PRODUCT,\n        },\n        {\n          text: priceTypes.PRODUCT_SET,\n          value: priceTypes.PRODUCT_SET,\n        },\n      ],\n      onFilter: (value, { type }) => type === value,\n    },\n    {\n      title: \"Категорія\",\n      dataIndex: \"categoryName\",\n      filters: getCategoryFiletrOptions(categories),\n      onFilter: (value, { category }) => category === value,\n    },\n    {\n      title: \"Під Категорія\",\n      dataIndex: \"subcategoryName\",\n      filters: getCategoryFiletrOptions(subCategories),\n      onFilter: (value, { subcategory }) => subcategory === value,\n    },\n  ];\n\n  return (\n    <>\n      <ButtonWrapper>\n        <ExcelExportPublick price={[...productData, ...productSetsData]} />\n        <p>Продуктів: {productData.length} шт. </p>\n        <p>Наборів: {productSetsData.length} шт. </p>\n      </ButtonWrapper>\n\n      <Table\n        columns={columnsConfig}\n        dataSource={[...productData, ...productSetsData]}\n        loading={loading}\n        rowKey=\"_id\"\n        pagination={{ showTotal: (total) => `Кількість ${total} шт.` }}\n      />\n    </>\n  );\n};\n","import { Routes, Route } from \"react-router-dom\";\nimport { routesConfig } from \"./config\";\n\nexport const AppRouter = () => {\n  return (\n    <Routes>\n      {routesConfig.map(({ routes, rootPath, Layout }) => (\n        <Route key={rootPath} path={rootPath} element={<Layout />}>\n          {routes.map(({ path, index, Component }) => (\n            <Route\n              index={index}\n              key={path}\n              path={path}\n              element={<Component />}\n            />\n          ))}\n        </Route>\n      ))}\n    </Routes>\n  );\n};\n","import * as R from \"ramda\";\n\nimport \"./App.css\";\nimport { ModalProvider } from \"./providers/ModalProvider\";\nimport { AppRouter } from \"./routes/AppRouter\";\nimport { UserProvider } from \"./providers/UserProvider\";\nimport { gql, useQuery } from \"@apollo/client\";\n\nconst SETTINGS_QUERY = gql`\n  query settings {\n    settings {\n      dropshippingMarkup\n    }\n  }\n`;\n\nexport const App = () => {\n  const { data, loading } = useQuery(SETTINGS_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  const dropshippingMarkup = R.path([\"settings\", \"dropshippingMarkup\"], data);\n\n  if (dropshippingMarkup > 0) {\n    localStorage.setItem(\"setting\", dropshippingMarkup);\n  }\n\n  return (\n    <UserProvider>\n      <ModalProvider>\n        <AppRouter />\n      </ModalProvider>\n    </UserProvider>\n  );\n};\n","import {\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n  ApolloProvider,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_SEVER_URL || \"http://localhost:3100/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token || \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nexport const ApolloClientProvider = ({ children }) => (\n  <ApolloProvider client={client}>{children}</ApolloProvider>\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { ConfigProvider } from \"antd\";\nimport moment from \"moment\";\nimport \"moment/locale/uk\";\n\nimport { App } from \"./App\";\nimport ru_RU from \"antd/lib/locale/ru_RU\";\nimport { ApolloClientProvider } from \"./providers/ApolloClientProvider\";\n\nmoment.locale(\"ru\");\n\nReactDOM.render(\n  <BrowserRouter>\n    <ConfigProvider locale={ru_RU}>\n      <ApolloClientProvider>\n        <App />\n      </ApolloClientProvider>\n    </ConfigProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}