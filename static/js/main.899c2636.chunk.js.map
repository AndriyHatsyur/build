{"version":3,"sources":["providers/ApolloClientProvider.js","providers/ModalProvider.js","components/Layouts.js","providers/UserProvider.js","components/AppMenu.js","components/MainLayout.js","components/Button.js","components/Form.js","pages/price/ProductForm/ProductForm.js","pages/price/ProductForm/utils.js","pages/price/ProductForm/AddProductForm.js","pages/price/ProductForm/EditProductForm.js","components/ProductShortTable.js","pages/price/ProductSetForm.js/ProductSetForm.js","pages/price/ProductSetForm.js/AddProductSetForm.js","pages/price/ProductSetForm.js/EditProductSetForm.js","pages/price/UpdatePrice/UpdatePrice.js","pages/price/UpdatePrice/UpdatePriceExcel.js","hook/useCinfirmModal.js","pages/price/PriceTable/priceTypes.js","pages/price/PriceTable/DeletePriceBtn.js","pages/price/PriceTable/ExcelExport.js","pages/price/PriceTable/priceTableUtils.js","pages/price/PriceTable/textFilter.js","pages/price/PriceTable/PriceTable.js","pages/category/CategoryForm/CategoryForm.js","pages/category/CategoryForm/utils.js","pages/category/CategoryForm/EditCategoryForm.js","pages/category/CategoryForm/AddCategoryForm.js","pages/category/CategoryTable/DeleteCategoryBtn.js","pages/category/CategoryTable/CategoryTable.js","pages/login/LoginForm.js","pages/login/LoginPage.js","routes/config.js","pages/price/PricePage.js","pages/category/CategoryPage.js","pages/price/PublicPricePage.js","routes/AppRouter.js","App.js","reportWebVitals.js","index.js"],"names":["httpLink","createHttpLink","uri","process","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloClientProvider","children","ApolloProvider","ModalContext","React","createContext","ModalProvider","useState","isModalVisible","setIsModalVisible","modalConfig","setModalConfig","modalContent","setModalContent","showModal","content","title","width","handleCancel","useModal","Provider","value","visible","onCancel","footer","useModalContext","useContext","Wrapper","styled","div","UserContext","UserProvider","user","setUser","userLogin","userLogout","removeItem","useUser","useUserContext","ExitBtn","AppMenu","location","useLocation","pathname","current","setCurrent","navigate","useNavigate","onClick","e","key","selectedKeys","mode","theme","Item","routes","home","category","style","marginLeft","login","ME_QUERY","gql","ButtonWrapper","DeleteButton","DeleteOutlined","color","EditButton","EditOutlined","requiredRule","required","message","SubmitBtnItem","type","htmlType","MarkupInputItem","label","name","min","ArticleInputItem","rules","getSubcategories","R","categoryId","subcategories","FlexWrapper","useCategoryId","initialValues","setCategoryId","onValuesChange","CategorySelectItem","useQuery","CATEGORIES_QUERY","fetchPolicy","data","loading","categories","map","_id","Option","allowClear","ProductForm","onFinish","layout","isSubcategoryNill","removeSubcategoriIsNeed","prepareCategoryId","prepareProductInitialValues","prepareProductBeforeSubmit","subcategoryId","ADD_PRODUCT_MUTATION","AddProductForm","closeModal","refetch","useMutation","addProduct","handleSubmit","values","a","variables","input","alert","UPDATE_PRODUCT_MUTATION","PRODUCT_QUERY","EditProductForm","id","updateProduct","update","ProductShortTable","products","dataSource","columns","dataIndex","pagination","rowKey","findSelectetdProduct","ids","filterSelectedProducts","SEARCH_PRODUCTS","ProductSelectItem","initialProducts","selectedProducts","setSelectedProducts","search","setSearch","skip","length","onChange","productIds","onSearch","filterOption","option","toLowerCase","indexOf","product","nomenclature","ProductSetForm","ADD_PRODUCT_SET_MUTATION","AddProductSetForm","addProductSet","UPDATE_PRODUCT_SET_MUTATION","PRODUCT_SET_QUERY","getInitialValues","EditProductSetForm","updateProductSet","BtnWrapper","UPDATE_PRODUCTS","CREATE_PRODUCTS","UpdatePrice","updateProductsItems","diffProducts","setNewPrice","createProducts","updateProducts","handleUpdateProducts","res","count","handleCreateAndUpdate","resCreate","resUpdate","countUpdate","countcareate","disabled","HiddenInput","preparePrice","article","parseInt","price","parseFloat","prepareOldPrice","UpdatePriceExcel","oldProductPrice","newPrice","ref","useRef","oldPrice","useMemo","nomencaltureDiff","getNomenclatureItemsDiff","nomenclatures","files","target","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","XLSX","read","bookVBA","wsname","SheetNames","ws","Sheets","utils","sheet_to_json","preparedData","readAsArrayBuffer","click","confirm","Modal","useConfirmDeleteModal","titleName","handleConfirm","icon","ExclamationCircleOutlined","okText","okType","cancelText","onOk","priceTypes","DELETE_PRODUCT_MUTATION","DELETE_PRODUCTSET_MUTATION","DeletePriceBtn","DELETE_MUTATION","priceId","deletePice","showDeleteConfirmModal","ExcelFile","ReactExport","ExcelSheet","ExcelColumn","ExcelExport","element","ExcelExportPublick","EMPTT_VALUE","getMarkup","fixedFloat","to","calculateMarkup","markup","isNotHaveMarkup","findProductSubCategory","undefined","isSubCategoryNotHaveMarkup","calculateSellingPrice","commonProductFields","subcategory","preparepProductData","wholesalePrice","Math","round","dropPrice","sellingPrice","getProducts","preparedProductSetData","b","getCategoriesOptions","subCategories","getCategoryFiletrOptions","text","SearchFilter","setSelectedKeys","clearFilters","padding","placeholder","onPressEnter","marginBottom","display","SearchOutlined","size","getColumnSearchProps","filterDropdown","props","filterIcon","filtered","onFilter","record","toString","includes","categoryFragment","productFragment","PRODUCTS_QUERY","CATEGORY_QUERY","PriceTable","categoriesData","productData","productSetsData","columnsConfig","sorter","localeCompare","filters","render","showEditPriceModal","showTotal","total","CategoryForm","List","fields","add","remove","field","align","noStyle","shouldUpdate","prevValues","curValues","area","sights","fieldKey","MinusCircleOutlined","block","PlusOutlined","isCategoryNotHaveSubcategory","prepareCategory","prepareSubcategory","populateSubcategoryWithId","uuidv4","populateSubcategoryWithIdIfNeed","prepareCreateCategoryBeforSubmit","prepareUpdateCategoryBeforSubmit","prepareCategoryIntialValues","UPDATE_CATEGORY_MUTATION","EditCategoryForm","updateCategory","updateCategoryId","ADD_CATEGORY_MUTATION","AddCategoryForm","addCategory","DELETE_CATEGORY_MUTATION","DeleteCategoryBtn","categoryName","deleteCategory","isSubcategory","prepareCategoryData","CategoryTable","showEditCategoryModal","LOGIN_MUTATION","LoginForm","response","setItem","setTimeout","labelCol","span","wrapperCol","remember","autoComplete","Password","offset","routesConfig","Layout","rootPath","path","Component","index","AppRouter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.899c2636.chunk.js","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n  ApolloProvider,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: process.env.REACT_APP_SEVER_URL || \"http://localhost:3100/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token || \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nexport const ApolloClientProvider = ({ children }) => (\n  <ApolloProvider client={client}>{children}</ApolloProvider>\n);\n","import React, { useContext, useState } from \"react\";\nimport { Modal } from \"antd\";\n\nconst useModal = () => {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [modalConfig, setModalConfig] = useState({});\n  const [modalContent, setModalContent] = useState(null);\n\n  const showModal = ({ content, title, width }) => {\n    setIsModalVisible(true);\n    setModalContent(content);\n    setModalConfig({ title, width });\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n    setModalContent(null);\n    setModalConfig({});\n  };\n\n  return {\n    isModalVisible,\n    showModal,\n    handleCancel,\n    modalConfig,\n    modalContent,\n  };\n};\n\nconst ModalContext = React.createContext({});\n\nexport const ModalProvider = ({ children }) => {\n  const { isModalVisible, showModal, handleCancel, modalConfig, modalContent } =\n    useModal();\n\n  return (\n    <ModalContext.Provider\n      value={{\n        isModalVisible,\n        showModal,\n        handleCancel,\n        modalConfig,\n      }}\n    >\n      {children}\n      {isModalVisible && (\n        <Modal\n          title={modalConfig.title}\n          visible={isModalVisible}\n          onCancel={handleCancel}\n          footer={null}\n          width={modalConfig.width}\n        >\n          {modalContent}\n        </Modal>\n      )}\n    </ModalContext.Provider>\n  );\n};\n\nexport const useModalContext = () => {\n  const modalContext = useContext(ModalContext);\n  return modalContext;\n};\n","import { Outlet } from \"react-router\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const LoginLayout = () => {\n  return (\n    <Wrapper>\n      <Outlet />\n    </Wrapper>\n  );\n};\n\nexport const EmptyLayout = () => {\n  return (\n    <div>\n      <Outlet />\n    </div>\n  );\n};\n","import React, { useContext, useState } from \"react\";\n\nconst useUser = () => {\n  const [user, setUser] = useState(null);\n\n  const userLogin = (user) => {\n    setUser(user);\n  };\n\n  const userLogout = () => {\n    setUser(null);\n    localStorage.removeItem(\"token\");\n  };\n\n  return {\n    user,\n    userLogin,\n    userLogout,\n  };\n};\n\nconst UserContext = React.createContext({});\n\nexport const UserProvider = ({ children }) => {\n  const { user, userLogin, userLogout } = useUser();\n\n  return (\n    <UserContext.Provider\n      value={{\n        user,\n        userLogin,\n        userLogout,\n      }}\n    >\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useUserContext = () => {\n  const userContext = useContext(UserContext);\n  return userContext;\n};\n","import { Menu } from \"antd\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { useUserContext } from \"../providers/UserProvider\";\n\nimport { routes } from \"../routes/config\";\n\nconst ExitBtn = styled.div`\n  cursor: pointer;\n  float: right;\n  &:hover {\n    color: #fff;\n  }\n`;\n\nexport const AppMenu = () => {\n  const location = useLocation();\n  const [current, setCurrent] = useState(location.pathname);\n\n  const { userLogout } = useUserContext();\n\n  const navigate = useNavigate();\n\n  const handleClick = (e) => {\n    setCurrent(e.key);\n    navigate(e.key);\n  };\n\n  return (\n    <Menu\n      onClick={handleClick}\n      selectedKeys={[current]}\n      mode=\"horizontal\"\n      theme=\"dark\"\n    >\n      <Menu.Item key={routes.home}>Прайс</Menu.Item>\n      <Menu.Item key={routes.category}>Категорії</Menu.Item>\n      <Menu.Item\n        style={{ marginLeft: \"auto\" }}\n        key={routes.login}\n        onClick={userLogout}\n      >\n        <ExitBtn>Вийти</ExitBtn>\n      </Menu.Item>\n    </Menu>\n  );\n};\n","import { Outlet } from \"react-router\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { useNavigate } from \"react-router\";\nimport * as R from \"ramda\";\n\nimport { AppMenu } from \"./AppMenu\";\nimport { routes } from \"../routes/config\";\nimport { useUserContext } from \"../providers/UserProvider\";\n\nconst ME_QUERY = gql`\n  query ME_QUERY {\n    me {\n      username\n    }\n  }\n`;\n\nexport const MainLayout = () => {\n  const { data, loading } = useQuery(ME_QUERY);\n  const navigate = useNavigate();\n\n  const { userLogin } = useUserContext();\n\n  if (loading) {\n    return null;\n  }\n\n  const user = R.propOr(null, \"me\", data);\n\n  if (!user) {\n    navigate(routes.login);\n  } else {\n    userLogin(user);\n  }\n\n  return (\n    <>\n      <AppMenu />\n      <Outlet />\n    </>\n  );\n};\n","import styled from \"styled-components\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  padding: 10px 15px;\n  gap: 12px;\n`;\n\nexport const DeleteButton = ({ onClick }) => (\n  <DeleteOutlined onClick={onClick} style={{ color: \"#ac372f\" }} />\n);\n\nexport const EditButton = ({ onClick }) => (\n  <EditOutlined onClick={onClick} style={{ color: \"#2a66c6\" }} />\n);\n","import { Form, Input, Button, InputNumber } from \"antd\";\n\nexport const requiredRule = {\n  required: true,\n  message: \"Це поле обов'язкове\",\n};\n\nexport const SubmitBtnItem = () => (\n  <Form.Item>\n    <Button type=\"primary\" htmlType=\"submit\">\n      Зберегти\n    </Button>\n  </Form.Item>\n);\n\nexport const MarkupInputItem = () => (\n  <Form.Item label=\"Націнка\" name=\"markup\">\n    <InputNumber min={0} />\n  </Form.Item>\n);\n\nexport const ArticleInputItem = () => (\n  <Form.Item label=\"Артикул\" name=\"article\" rules={[requiredRule]}>\n    <Input />\n  </Form.Item>\n);\n","import { useQuery } from \"@apollo/client\";\nimport { Form, Input, Select, InputNumber } from \"antd\";\nimport * as R from \"ramda\";\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  ArticleInputItem,\n  MarkupInputItem,\n  requiredRule,\n  SubmitBtnItem,\n} from \"../../../components/Form\";\nimport { CATEGORIES_QUERY } from \"../../category/CategoryTable/CategoryTable\";\n\n// getSubcategories :: Category -> Subcategory Null\nconst getSubcategories = R.curry((categoryId, subcategories) =>\n  R.compose(\n    R.propOr(null, \"subcategories\"),\n    R.find(R.propEq(\"_id\", categoryId))\n  )(subcategories)\n);\n\nconst FlexWrapper = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  gap: 30px;\n`;\n\nexport const useCategoryId = (initialValues) => {\n  const [categoryId, setCategoryId] = useState(initialValues.categoryId);\n\n  const onValuesChange = (_, { categoryId }) => {\n    if (categoryId) {\n      setCategoryId(categoryId);\n    }\n  };\n\n  return {\n    categoryId,\n    onValuesChange,\n  };\n};\n\nexport const CategorySelectItem = ({ categoryId }) => {\n  const { data, loading } = useQuery(CATEGORIES_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const categories = R.propOr([], \"categories\", data);\n\n  if (loading) return null;\n\n  const subcategories = getSubcategories(categoryId, categories);\n\n  return (\n    <>\n      <Form.Item label=\"Категорія\" name=\"categoryId\" rules={[requiredRule]}>\n        <Select>\n          {categories.map(({ name, _id }) => (\n            <Select.Option key={_id} value={_id}>\n              {name}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n      {subcategories && (\n        <Form.Item label=\"Підкатегорія\" name=\"subcategoryId\">\n          <Select allowClear={true}>\n            {subcategories.map(({ name, _id }) => (\n              <Select.Option key={_id} value={_id}>\n                {name}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n      )}\n    </>\n  );\n};\n\nexport const ProductForm = ({ onFinish, initialValues = {} }) => {\n  const { categoryId, onValuesChange } = useCategoryId(initialValues);\n\n  return (\n    <Form\n      onValuesChange={onValuesChange}\n      name=\"productForm\"\n      onFinish={onFinish}\n      layout={\"vertical\"}\n      initialValues={initialValues}\n    >\n      <Form.Item\n        label=\"Номенклатура\"\n        name=\"nomenclature\"\n        rules={[requiredRule]}\n      >\n        <Input />\n      </Form.Item>\n      <ArticleInputItem />\n      <FlexWrapper>\n        <Form.Item label=\"Залишок\" name=\"count\" rules={[requiredRule]}>\n          <InputNumber min={0} />\n        </Form.Item>\n        <Form.Item label=\"Закупка\" name=\"price\" rules={[requiredRule]}>\n          <InputNumber min={0} />\n        </Form.Item>\n        <MarkupInputItem />\n      </FlexWrapper>\n\n      <CategorySelectItem categoryId={categoryId} />\n      <SubmitBtnItem />\n    </Form>\n  );\n};\n","import * as R from \"ramda\";\n\n// isSubcategoryNill :: Category -> Boolean\nconst isSubcategoryNill = R.compose(R.isNil, R.prop(\"subcategoryId\"));\n\n// removeSubcategoriIsNeed :: ProductFormData -> ProductInput\nexport const removeSubcategoriIsNeed = R.when(\n  isSubcategoryNill,\n  R.dissoc(\"subcategoryId\")\n);\n\nexport const prepareCategoryId = R.converge(R.mergeRight, [\n  R.identity,\n  R.applySpec({\n    categoryId: R.path([\"category\", \"_id\"]),\n  }),\n]);\n\n// prepareProductInitialValues :: QueryProductData -> InitialProductValue\nexport const prepareProductInitialValues = R.compose(\n  prepareCategoryId,\n  R.dissoc(\"__typename\"),\n  R.propOr({}, \"product\")\n);\n\n// prepareProductBeforeSubmit :: ProductFormData -> ProductInput\nexport const prepareProductBeforeSubmit = R.when(\n  isSubcategoryNill,\n  R.mergeLeft({ subcategoryId: null })\n);\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { ProductForm } from \"./ProductForm\";\nimport { removeSubcategoriIsNeed } from \"./utils\";\n\nconst ADD_PRODUCT_MUTATION = gql`\n  mutation createProduct($input: ProductInput!) {\n    createProduct(input: $input) {\n      _id\n    }\n  }\n`;\n\nexport const AddProductForm = ({ closeModal, refetch }) => {\n  const [addProduct] = useMutation(ADD_PRODUCT_MUTATION);\n\n  const handleSubmit = async (values) => {\n    try {\n      await addProduct({\n        variables: {\n          input: removeSubcategoriIsNeed(values),\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return <ProductForm onFinish={handleSubmit} />;\n};\n","import { useMutation, useQuery, gql } from \"@apollo/client\";\n\nimport { ProductForm } from \"./ProductForm\";\nimport {\n  prepareProductBeforeSubmit,\n  prepareProductInitialValues,\n} from \"./utils\";\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation updateProduct($id: ID!, $update: ProductInput!) {\n    updateProduct(id: $id, update: $update) {\n      _id\n    }\n  }\n`;\n\nconst PRODUCT_QUERY = gql`\n  query product($id: ID!) {\n    product(id: $id) {\n      _id\n      nomenclature\n      article\n      count\n      price\n      subcategoryId\n      markup\n      category {\n        _id\n        name\n        markup\n        subcategories {\n          _id\n          name\n          markup\n        }\n      }\n    }\n  }\n`;\n\nexport const EditProductForm = ({ id, closeModal, refetch }) => {\n  const [updateProduct] = useMutation(UPDATE_PRODUCT_MUTATION);\n\n  const { data, loading } = useQuery(PRODUCT_QUERY, {\n    variables: { id },\n    fetchPolicy: \"network-only\",\n  });\n\n  if (loading) return null;\n\n  const initialValues = prepareProductInitialValues(data);\n\n  const handleSubmit = async (values) => {\n    try {\n      await updateProduct({\n        variables: {\n          id,\n          update: prepareProductBeforeSubmit(values),\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return <ProductForm onFinish={handleSubmit} initialValues={initialValues} />;\n};\n","import { Table } from \"antd\";\n\nexport const ProductShortTable = ({ products }) => {\n  const columns = [\n    {\n      title: \"Номенклатура\",\n      dataIndex: \"nomenclature\",\n    },\n    {\n      title: \"Артикул\",\n      dataIndex: \"article\",\n    },\n    {\n      title: \"Залишок\",\n      dataIndex: \"count\",\n    },\n    {\n      title: \"Закупка\",\n      dataIndex: \"price\",\n    },\n  ];\n\n  return (\n    <Table\n      dataSource={products}\n      columns={columns}\n      pagination={false}\n      rowKey=\"nomenclature\"\n    />\n  );\n};\n","import { useQuery, gql } from \"@apollo/client\";\nimport { Form, Input, Select } from \"antd\";\nimport * as R from \"ramda\";\nimport { useState } from \"react\";\n\nimport {\n  ArticleInputItem,\n  requiredRule,\n  SubmitBtnItem,\n} from \"../../../components/Form\";\nimport { ProductShortTable } from \"../../../components/ProductShortTable\";\nimport { CategorySelectItem, useCategoryId } from \"../ProductForm/ProductForm\";\n\n// findSelectetdProduct :: [ID] -> [Products] -> Product\nconst findSelectetdProduct = R.curry((ids, products) =>\n  R.find(R.propEq(\"_id\", R.last(ids)), products)\n);\n\nconst filterSelectedProducts = R.curry((ids, products) =>\n  R.filter(R.compose(R.includes(R.__, ids), R.prop(\"_id\")), products)\n);\n\nconst SEARCH_PRODUCTS = gql`\n  query productsSearch($search: String!) {\n    productsSearch(search: $search) {\n      _id\n      nomenclature\n      article\n      price\n      count\n    }\n  }\n`;\n\nconst ProductSelectItem = ({ initialProducts }) => {\n  const [selectedProducts, setSelectedProducts] = useState(initialProducts);\n\n  const [search, setSearch] = useState(\"\");\n\n  const { data } = useQuery(SEARCH_PRODUCTS, {\n    variables: {\n      search,\n    },\n    skip: search.length < 3,\n  });\n\n  const products = R.uniq([\n    ...R.propOr([], \"productsSearch\", data),\n    ...initialProducts,\n  ]);\n\n  const onSearch = (value) => {\n    setSearch(value);\n  };\n\n  const onChange = (productIds) => {\n    if (productIds.length > selectedProducts.length) {\n      setSelectedProducts([\n        ...selectedProducts,\n        findSelectetdProduct(productIds, products),\n      ]);\n    } else {\n      setSelectedProducts(filterSelectedProducts(productIds, selectedProducts));\n    }\n  };\n\n  return (\n    <>\n      <Form.Item label=\"Продукти\" name=\"productIds\" rules={[requiredRule]}>\n        <Select\n          onChange={onChange}\n          onSearch={onSearch}\n          mode=\"multiple\"\n          filterOption={(input, option) =>\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n          }\n        >\n          {products.map((product) => (\n            <Select.Option key={product._id} value={product._id}>\n              {product.nomenclature}\n            </Select.Option>\n          ))}\n        </Select>\n      </Form.Item>\n\n      <ProductShortTable products={selectedProducts} />\n      <br></br>\n    </>\n  );\n};\n\nexport const ProductSetForm = ({\n  onFinish,\n  initialValues = {},\n  initialProducts = [],\n}) => {\n  const { categoryId, onValuesChange } = useCategoryId(initialValues);\n  return (\n    <Form\n      name=\"productForm\"\n      onFinish={onFinish}\n      layout={\"vertical\"}\n      initialValues={initialValues}\n      onValuesChange={onValuesChange}\n    >\n      <Form.Item\n        label=\"Номенклатура\"\n        name=\"nomenclature\"\n        rules={[requiredRule]}\n      >\n        <Input />\n      </Form.Item>\n      <CategorySelectItem categoryId={categoryId} />\n      <ArticleInputItem />\n      <ProductSelectItem initialProducts={initialProducts} />\n      <SubmitBtnItem />\n    </Form>\n  );\n};\n","import { useMutation, gql } from \"@apollo/client\";\nimport { removeSubcategoriIsNeed } from \"../ProductForm/utils\";\n\nimport { ProductSetForm } from \"./ProductSetForm\";\n\nconst ADD_PRODUCT_SET_MUTATION = gql`\n  mutation createProductSet($input: ProductSetInput!) {\n    createProductSet(input: $input) {\n      _id\n    }\n  }\n`;\n\nexport const AddProductSetForm = ({ closeModal, refetch }) => {\n  const [addProductSet] = useMutation(ADD_PRODUCT_SET_MUTATION);\n\n  const handleSubmit = async (values) => {\n    await addProductSet({\n      variables: {\n        input: removeSubcategoriIsNeed(values),\n      },\n    });\n    closeModal();\n    refetch();\n  };\n\n  return <ProductSetForm onFinish={handleSubmit} />;\n};\n","import { useMutation, gql, useQuery } from \"@apollo/client\";\nimport * as R from \"ramda\";\nimport {\n  prepareCategoryId,\n  prepareProductBeforeSubmit,\n} from \"../ProductForm/utils\";\n\nimport { ProductSetForm } from \"./ProductSetForm\";\n\nconst UPDATE_PRODUCT_SET_MUTATION = gql`\n  mutation updateProductSet($id: ID!, $update: ProductSetInput!) {\n    updateProductSet(id: $id, update: $update) {\n      _id\n    }\n  }\n`;\n\nconst PRODUCT_SET_QUERY = gql`\n  query productSet($id: ID!) {\n    productSet(id: $id) {\n      _id\n      nomenclature\n      article\n      products {\n        _id\n        nomenclature\n        article\n        count\n        price\n      }\n      category {\n        _id\n        name\n        subcategories {\n          _id\n          name\n        }\n      }\n      subcategoryId\n    }\n  }\n`;\n\nconst getInitialValues = R.compose(\n  prepareCategoryId,\n  R.converge(R.mergeRight, [\n    R.identity,\n    R.compose(R.objOf(\"productIds\"), R.pluck(\"_id\"), R.propOr([], \"products\")),\n  ]),\n  R.propOr([], \"productSet\")\n);\n\nexport const EditProductSetForm = ({ id, closeModal, refetch }) => {\n  const [updateProductSet] = useMutation(UPDATE_PRODUCT_SET_MUTATION);\n\n  const { data, loading } = useQuery(PRODUCT_SET_QUERY, {\n    variables: { id },\n    fetchPolicy: \"network-only\",\n  });\n\n  if (loading) return null;\n\n  const initialProducts = R.pathOr([], [\"productSet\", \"products\"], data);\n\n  const initialValues = getInitialValues(data);\n\n  const handleSubmit = async (values) => {\n    await updateProductSet({\n      variables: {\n        id,\n        update: prepareProductBeforeSubmit(values),\n      },\n    });\n    closeModal();\n    refetch();\n  };\n\n  return (\n    <ProductSetForm\n      onFinish={handleSubmit}\n      initialValues={initialValues}\n      initialProducts={initialProducts}\n    />\n  );\n};\n","import { Button } from \"antd\";\nimport { ProductShortTable } from \"../../../components/ProductShortTable\";\nimport styled from \"styled-components\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport * as R from \"ramda\";\n\nconst BtnWrapper = styled.div`\n  padding: 15px 0;\n  display: flex;\n  gap: 10px;\n`;\n\nconst UPDATE_PRODUCTS = gql`\n  mutation updateProducts($update: [ProductsInput]!) {\n    updateProducts(update: $update)\n  }\n`;\n\nconst CREATE_PRODUCTS = gql`\n  mutation createProducts($input: [ProductsInput]!) {\n    createProducts(input: $input)\n  }\n`;\n\nexport const UpdatePrice = ({\n  updateProductsItems,\n  diffProducts,\n  setNewPrice,\n  closeModal,\n  refetch,\n}) => {\n  const [createProducts] = useMutation(CREATE_PRODUCTS);\n\n  const [updateProducts, { loading }] = useMutation(UPDATE_PRODUCTS);\n\n  const handleUpdateProducts = async () => {\n    const res = await updateProducts({\n      variables: {\n        update: updateProductsItems,\n      },\n    });\n    await refetch();\n    const count = R.pathOr(0, [\"data\", \"updateProducts\"], res);\n    alert(`Оновлено ${count} продуктів`);\n    setNewPrice([]);\n    closeModal();\n  };\n\n  const handleCreateAndUpdate = async () => {\n    const resCreate = await createProducts({\n      variables: {\n        input: diffProducts,\n      },\n    });\n\n    let resUpdate;\n    if (!R.isEmpty(updateProductsItems)) {\n      resUpdate = await updateProducts({\n        variables: {\n          update: updateProductsItems,\n        },\n      });\n    }\n\n    await refetch();\n    const countUpdate = R.pathOr(0, [\"data\", \"updateProducts\"], resUpdate);\n    const countcareate = R.pathOr(0, [\"data\", \"createProducts\"], resCreate);\n\n    alert(`Оновлено ${countUpdate} продуктів та створено ${countcareate} `);\n    setNewPrice([]);\n    closeModal();\n  };\n\n  return (\n    <>\n      <BtnWrapper>\n        <Button\n          disabled={R.isEmpty(diffProducts)}\n          loading={loading}\n          onClick={handleCreateAndUpdate}\n        >\n          Створити нові та оновити\n        </Button>\n        <Button\n          disabled={R.isEmpty(updateProductsItems)}\n          loading={loading}\n          onClick={handleUpdateProducts}\n        >\n          Тільки оновити існуючі\n        </Button>\n      </BtnWrapper>\n      <h3>Продукти яких немає у базі!</h3>\n      <ProductShortTable products={diffProducts} />\n    </>\n  );\n};\n","import { useMemo, useRef, useState } from \"react\";\nimport XLSX from \"xlsx\";\nimport * as R from \"ramda\";\nimport { Button } from \"antd\";\nimport styled from \"styled-components\";\n\nimport { UpdatePrice } from \"./UpdatePrice\";\n\nconst HiddenInput = styled.input`\n  opacity: 0;\n  width: 0;\n  height: 0;\n`;\n\nconst preparePrice = R.map(\n  R.applySpec({\n    nomenclature: R.propOr(\"\", \"Номенклатура\"),\n    article: R.propOr(\"\", \"Артикул\"),\n    count: R.compose(parseInt, R.propOr(0, \"Залишок\")),\n    price: R.compose(parseFloat, R.propOr(0, \"Закупка\")),\n  })\n);\n\nconst prepareOldPrice = R.map(\n  R.pick([\"nomenclature\", \"article\", \"count\", \"price\"])\n);\n\nconst filterNewItemsDiff = (nomenclatures) =>\n  R.filter(R.compose(R.includes(R.__, nomenclatures), R.prop(\"article\")));\n\nconst filterNewItemsWithOutDiff = (nomenclatures) =>\n  R.filter(\n    R.compose(R.not, R.includes(R.__, nomenclatures), R.prop(\"article\"))\n  );\n\nconst getNomenclatureItemsDiff = (oldPrice, newPrice) =>\n  R.ifElse(\n    R.isEmpty,\n    R.always([]),\n    R.converge(R.difference, [\n      R.pluck(\"article\"),\n      R.always(R.pluck(\"article\", oldPrice)),\n    ])\n  )(newPrice);\nexport const UpdatePriceExcel = ({ oldProductPrice, closeModal, refetch }) => {\n  const [newPrice, setNewPrice] = useState([]);\n\n  const ref = useRef();\n\n  const oldPrice = useMemo(\n    () => prepareOldPrice(oldProductPrice),\n    [oldProductPrice]\n  );\n\n  const nomencaltureDiff = useMemo(\n    () => getNomenclatureItemsDiff(oldPrice, newPrice),\n    [newPrice, oldPrice]\n  );\n\n  const diffProducts = useMemo(\n    () => filterNewItemsDiff(nomencaltureDiff)(newPrice),\n    [newPrice, nomencaltureDiff]\n  );\n\n  const updateProductsItems = useMemo(\n    () => filterNewItemsWithOutDiff(nomencaltureDiff)(newPrice),\n    [newPrice, nomencaltureDiff]\n  );\n\n  const tiggerInput = () => ref.current.click();\n\n  const handleChange = (e) => {\n    const files = e.target.files;\n\n    if (files && files[0]) {\n      const reader = new FileReader();\n      const rABS = !!reader.readAsBinaryString;\n\n      reader.onload = (e) => {\n        const bstr = e.target.result;\n        const wb = XLSX.read(bstr, {\n          type: rABS ? \"binary\" : \"array\",\n          bookVBA: true,\n        });\n\n        const wsname = wb.SheetNames[0];\n        const ws = wb.Sheets[wsname];\n        const data = XLSX.utils.sheet_to_json(ws);\n        const preparedData = preparePrice(data);\n        setNewPrice(preparedData);\n      };\n\n      if (rABS) {\n        reader.readAsBinaryString(files[0]);\n      } else {\n        reader.readAsArrayBuffer(files[0]);\n      }\n    }\n  };\n\n  return (\n    <>\n      <HiddenInput ref={ref} type=\"file\" onChange={handleChange} />\n      <Button onClick={tiggerInput}>Вибрати файл</Button>\n      <UpdatePrice\n        updateProductsItems={updateProductsItems}\n        diffProducts={diffProducts}\n        setNewPrice={setNewPrice}\n        closeModal={closeModal}\n        refetch={refetch}\n      />\n    </>\n  );\n};\n","import { Modal } from \"antd\";\nimport { ExclamationCircleOutlined } from \"@ant-design/icons\";\n\nconst { confirm } = Modal;\n\nexport const useConfirmDeleteModal = (titleName, handleConfirm, refetch) => {\n  return () =>\n    confirm({\n      title: `Ви впевнені що хочите видалити ${titleName}`,\n      icon: <ExclamationCircleOutlined />,\n      okText: \"Так\",\n      okType: \"danger\",\n      cancelText: \"Ні\",\n      onOk: async () => {\n        try {\n          await handleConfirm();\n          await refetch();\n        } catch (e) {\n          alert(e);\n        }\n      },\n    });\n};\n","export const priceTypes = {\n  PRODUCT: \"Продукт\",\n  PRODUCT_SET: \"Набір\",\n};\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { DeleteButton } from \"../../../components/Button\";\nimport { useConfirmDeleteModal } from \"../../../hook/useCinfirmModal\";\nimport { priceTypes } from \"./priceTypes\";\n\nconst DELETE_PRODUCT_MUTATION = gql`\n  mutation deleteProduct($priceId: ID!) {\n    deleteProduct(id: $priceId)\n  }\n`;\n\nconst DELETE_PRODUCTSET_MUTATION = gql`\n  mutation deleteProductSet($priceId: ID!) {\n    deleteProductSet(id: $priceId)\n  }\n`;\n\nexport const DeletePriceBtn = ({ id, nomenclature, refetch, type }) => {\n  const DELETE_MUTATION =\n    type === priceTypes.PRODUCT\n      ? DELETE_PRODUCT_MUTATION\n      : DELETE_PRODUCTSET_MUTATION;\n\n  const [deletePice] = useMutation(DELETE_MUTATION, {\n    variables: { priceId: id },\n  });\n\n  const showDeleteConfirmModal = useConfirmDeleteModal(\n    nomenclature,\n    deletePice,\n    refetch\n  );\n\n  return <DeleteButton onClick={showDeleteConfirmModal} />;\n};\n","import { Button } from \"antd\";\nimport ReactExport from \"react-export-excel\";\n\nconst ExcelFile = ReactExport.ExcelFile;\nconst ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst ExcelColumn = ReactExport.ExcelFile.ExcelColumn;\n\nexport const ExcelExport = ({ price }) => {\n  return (\n    <ExcelFile element={<Button type=\"primary\">Excel Export</Button>}>\n      <ExcelSheet data={price} name=\"Price\">\n        <ExcelColumn label=\"Номенклатура\" value=\"nomenclature\" />\n        <ExcelColumn label=\"Артикул\" value=\"article\" />\n        <ExcelColumn label=\"Залишок\" value=\"count\" />\n        <ExcelColumn label=\"Закупка\" value=\"price\" />\n        <ExcelColumn label=\"Закупка дроп\" value=\"dropPrice\" />\n        <ExcelColumn label=\"Продаж\" value=\"sellingPrice\" />\n        <ExcelColumn label=\"Опт\" value=\"wholesalePrice\" />\n        <ExcelColumn label=\"Тип\" value=\"type\" />\n        <ExcelColumn label=\"Категорія\" value=\"category\" />\n        <ExcelColumn label=\"Під Категорія\" value=\"subcategory\" />\n      </ExcelSheet>\n    </ExcelFile>\n  );\n};\n\nexport const ExcelExportPublick = ({ price }) => {\n  return (\n    <ExcelFile element={<Button type=\"primary\">Excel Export</Button>}>\n      <ExcelSheet data={price} name=\"Price\">\n        <ExcelColumn label=\"Номенклатура\" value=\"nomenclature\" />\n        <ExcelColumn label=\"Артикул\" value=\"article\" />\n        <ExcelColumn label=\"Залишок\" value=\"count\" />\n        <ExcelColumn label=\"Закупка дроп\" value=\"dropPrice\" />\n        <ExcelColumn label=\"Продаж\" value=\"sellingPrice\" />\n        <ExcelColumn label=\"Опт\" value=\"wholesalePrice\" />\n        <ExcelColumn label=\"Тип\" value=\"type\" />\n        <ExcelColumn label=\"Категорія\" value=\"category\" />\n        <ExcelColumn label=\"Під Категорія\" value=\"subcategory\" />\n      </ExcelSheet>\n    </ExcelFile>\n  );\n};\n","import * as R from \"ramda\";\n\nimport { priceTypes } from \"./priceTypes\";\n\nconst EMPTT_VALUE = \"-\";\n\nconst DROPSHIPPING_MARKUP = 10;\nconst WHOLESALE_MARKUP = -5;\n\n// getMarkup :: Product -> Number\nconst getMarkup = R.propOr(0, \"markup\");\n\n// fixedFloat :: Number -> Number -> Number\nconst fixedFloat = (to) => R.invoker(1, \"toFixed\")(to);\n\n// calculateMarkup :: Number -> Number\nconst calculateMarkup = R.curry((markup, price) =>\n  R.compose(\n    fixedFloat(2),\n    R.multiply(R.add(100, markup)),\n    R.divide(R.__, 100)\n  )(price)\n);\n\n// isNotHaveMarkup :: Object -> Boolean\nconst isNotHaveMarkup = R.compose(R.equals(0), getMarkup);\n\n// findProductSubCategory :: Product -> Subcategory\nconst findProductSubCategory = R.converge(R.find, [\n  R.compose(R.propEq(\"_id\"), R.propOr(undefined, \"subcategoryId\")),\n  R.pathOr([], [\"category\", \"subcategories\"]),\n]);\n\n// isSubCategoryNotHaveMarkup :: Product -> Boolean\nconst isSubCategoryNotHaveMarkup = R.compose(\n  isNotHaveMarkup,\n  findProductSubCategory\n);\n\n// calculateSellingPrice :: Product -> Number\nconst calculateSellingPrice = R.converge(calculateMarkup, [\n  R.ifElse(\n    isNotHaveMarkup,\n    R.ifElse(\n      isSubCategoryNotHaveMarkup,\n      R.pathOr(0, [\"category\", \"markup\"]),\n      R.compose(getMarkup, findProductSubCategory)\n    ),\n    getMarkup\n  ),\n  R.propOr(0, \"price\"),\n]);\n\nconst commonProductFields = {\n  _id: R.prop(\"_id\"),\n  nomenclature: R.propOr(EMPTT_VALUE, \"nomenclature\"),\n  article: R.propOr(EMPTT_VALUE, \"article\"),\n  category: R.pathOr(EMPTT_VALUE, [\"category\", \"name\"]),\n  subcategory: R.compose(R.propOr(EMPTT_VALUE, \"name\"), findProductSubCategory),\n};\n\n// preparepProductData :: ProductQueryData -> [PreparedProduct]\nexport const preparepProductData = R.compose(\n  R.map(\n    R.compose(\n      R.converge(R.mergeRight, [\n        R.identity,\n        R.applySpec({\n          wholesalePrice: R.compose(\n            Math.round,\n            calculateMarkup(WHOLESALE_MARKUP),\n            R.propOr(0, \"sellingPrice\")\n          ),\n        }),\n      ]),\n      R.applySpec({\n        ...commonProductFields,\n        count: R.propOr(EMPTT_VALUE, \"count\"),\n        price: R.propOr(EMPTT_VALUE, \"price\"),\n        dropPrice: R.compose(\n          parseFloat,\n          calculateMarkup(DROPSHIPPING_MARKUP),\n          R.propOr(0, \"price\")\n        ),\n        sellingPrice: R.compose(Math.round, calculateSellingPrice),\n        type: R.always(priceTypes.PRODUCT),\n      })\n    )\n  ),\n  R.propOr([], \"products\")\n);\n\nconst getProducts = R.propOr([], \"products\");\n\nconst diff = (a, b) => a - b;\n\nexport const preparedProductSetData = R.compose(\n  R.map(\n    R.applySpec({\n      ...commonProductFields,\n      price: R.compose(R.sum, R.pluck(\"price\"), getProducts),\n      count: R.compose(R.head, R.sort(diff), R.pluck(\"count\"), getProducts),\n      dropPrice: R.compose(\n        fixedFloat(2),\n        parseFloat,\n        R.sum,\n        R.pluck(\"dropPrice\"),\n        getProducts\n      ),\n      sellingPrice: R.compose(\n        Math.round,\n        R.sum,\n        R.pluck(\"sellingPrice\"),\n        getProducts\n      ),\n      wholesalePrice: R.compose(\n        fixedFloat(2),\n        R.sum,\n        R.pluck(\"wholesalePrice\"),\n        getProducts\n      ),\n      type: R.always(priceTypes.PRODUCT_SET),\n    })\n  ),\n  R.map(\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.compose(R.objOf(\"products\"), preparepProductData),\n    ])\n  ),\n  R.propOr([], \"productSets\")\n);\n\nexport const getCategoriesOptions = R.compose(\n  R.applySpec({\n    categories: R.compose(R.uniq, R.pluck(\"name\")),\n    subCategories: R.compose(\n      R.reject(R.isNil),\n      R.uniq,\n      R.pluck(\"name\"),\n      R.unnest,\n      R.pluck(\"subcategories\")\n    ),\n  }),\n  R.propOr([], \"categories\")\n);\n\nexport const getCategoryFiletrOptions = R.compose(\n  R.append({\n    text: EMPTT_VALUE,\n    value: EMPTT_VALUE,\n  }),\n  R.map(\n    R.applySpec({\n      text: R.identity,\n      value: R.identity,\n    })\n  )\n);\n","import { Input, Button, Space } from \"antd\";\nimport { SearchOutlined } from \"@ant-design/icons\";\n\nconst SearchFilter = ({\n  setSelectedKeys,\n  selectedKeys,\n  confirm,\n  clearFilters,\n}) => {\n  return (\n    <div style={{ padding: 8 }}>\n      <Input\n        placeholder=\"Пошук\"\n        value={selectedKeys[0]}\n        onChange={(e) =>\n          setSelectedKeys(e.target.value ? [e.target.value] : [])\n        }\n        onPressEnter={() => confirm()}\n        style={{ marginBottom: 8, display: \"block\" }}\n      />\n      <Space>\n        <Button\n          type=\"primary\"\n          onClick={() => confirm()}\n          icon={<SearchOutlined />}\n          size=\"small\"\n          style={{ width: 90 }}\n        >\n          Знайти\n        </Button>\n        <Button\n          onClick={() => clearFilters()}\n          size=\"small\"\n          style={{ width: 90 }}\n        >\n          Очистити\n        </Button>\n      </Space>\n    </div>\n  );\n};\n\nexport const getColumnSearchProps = (dataIndex) => ({\n  filterDropdown: (props) => <SearchFilter {...props} />,\n  filterIcon: (filtered) => (\n    <SearchOutlined style={{ color: filtered ? \"#1890ff\" : undefined }} />\n  ),\n  onFilter: (value, record) =>\n    record[dataIndex]\n      ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n      : \"\",\n});\n","import { useQuery, gql } from \"@apollo/client\";\nimport { Table, Button } from \"antd\";\nimport { ButtonWrapper, EditButton } from \"../../../components/Button\";\n\nimport { useModalContext } from \"../../../providers/ModalProvider\";\nimport { AddProductForm } from \"../ProductForm/AddProductForm\";\nimport { EditProductForm } from \"../ProductForm/EditProductForm\";\nimport { AddProductSetForm } from \"../ProductSetForm.js/AddProductSetForm\";\nimport { EditProductSetForm } from \"../ProductSetForm.js/EditProductSetForm\";\nimport { UpdatePriceExcel } from \"../UpdatePrice/UpdatePriceExcel\";\nimport { DeletePriceBtn } from \"./DeletePriceBtn\";\nimport { ExcelExport } from \"./ExcelExport\";\nimport {\n  preparepProductData,\n  preparedProductSetData,\n  getCategoriesOptions,\n  getCategoryFiletrOptions,\n} from \"./priceTableUtils\";\nimport { priceTypes } from \"./priceTypes\";\nimport { getColumnSearchProps } from \"./textFilter\";\n\nexport const categoryFragment = gql`\n  fragment categoryFragment on Category {\n    _id\n    name\n    markup\n    subcategories {\n      _id\n      name\n      markup\n    }\n  }\n`;\n\nexport const productFragment = gql`\n  fragment productFragment on Product {\n    _id\n    nomenclature\n    article\n    count\n    price\n    subcategoryId\n    markup\n    category {\n      ...categoryFragment\n    }\n  }\n  ${categoryFragment}\n`;\n\nexport const PRODUCTS_QUERY = gql`\n  query {\n    products {\n      ...productFragment\n    }\n    productSets {\n      _id\n      nomenclature\n      article\n      subcategoryId\n      category {\n        ...categoryFragment\n      }\n      products {\n        ...productFragment\n        category {\n          ...categoryFragment\n        }\n      }\n    }\n  }\n  ${productFragment},\n  ${categoryFragment}\n`;\n\nexport const CATEGORY_QUERY = gql`\n  query {\n    categories {\n      name\n      subcategories {\n        name\n      }\n    }\n  }\n`;\n\nexport const PriceTable = () => {\n  const { data, loading, refetch } = useQuery(PRODUCTS_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { data: categoriesData } = useQuery(CATEGORY_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { categories, subCategories } = getCategoriesOptions(categoriesData);\n\n  const productData = preparepProductData(data);\n  const productSetsData = preparedProductSetData(data);\n  const { showModal, handleCancel } = useModalContext();\n\n  const showAddProductForm = () =>\n    showModal({\n      title: \"Додати новий продукт\",\n      content: () => (\n        <AddProductForm closeModal={handleCancel} refetch={refetch} />\n      ),\n    });\n\n  const showAddProductSetForm = () =>\n    showModal({\n      title: \"Додати новий набір\",\n      width: 800,\n      content: () => (\n        <AddProductSetForm closeModal={handleCancel} refetch={refetch} />\n      ),\n    });\n\n  const showEditPriceModal = (id, { nomenclature, type }) => {\n    if (type === priceTypes.PRODUCT) {\n      showModal({\n        title: `Редагувати продукт ${nomenclature}`,\n        content: () => (\n          <EditProductForm\n            closeModal={handleCancel}\n            refetch={refetch}\n            id={id}\n          />\n        ),\n      });\n    } else {\n      showModal({\n        title: `Редагувати набір ${nomenclature}`,\n        width: 800,\n        content: () => (\n          <EditProductSetForm\n            closeModal={handleCancel}\n            refetch={refetch}\n            id={id}\n          />\n        ),\n      });\n    }\n  };\n\n  const showUpdateProductsModal = () => {\n    showModal({\n      title: \"Оновити продукти\",\n      width: 800,\n      content: () => (\n        <UpdatePriceExcel\n          oldProductPrice={productData}\n          closeModal={handleCancel}\n          refetch={refetch}\n        />\n      ),\n    });\n  };\n\n  const columnsConfig = [\n    {\n      title: \"Номенклатура\",\n      dataIndex: \"nomenclature\",\n      ...getColumnSearchProps(\"nomenclature\"),\n    },\n    {\n      title: \"Артикул\",\n      dataIndex: \"article\",\n\n      ...getColumnSearchProps(\"article\"),\n      sorter: (a, b) => a.article.localeCompare(b.article),\n    },\n    {\n      title: \"Залишок\",\n      dataIndex: \"count\",\n      sorter: (a, b) => b.count - a.count,\n    },\n    {\n      title: \"Закупка\",\n      dataIndex: \"price\",\n      sorter: (a, b) => b.price - a.price,\n    },\n    {\n      title: \"Закупка дроп\",\n      dataIndex: \"dropPrice\",\n      sorter: (a, b) => b.dropPrice - a.dropPrice,\n    },\n    {\n      title: \"Продаж\",\n      dataIndex: \"sellingPrice\",\n      sorter: (a, b) => b.sellingPrice - a.sellingPrice,\n    },\n    {\n      title: \"Опт\",\n      dataIndex: \"wholesalePrice\",\n      sorter: (a, b) => b.wholesalePrice - a.wholesalePrice,\n    },\n    {\n      title: \"Тип\",\n      dataIndex: \"type\",\n      filters: [\n        {\n          text: priceTypes.PRODUCT,\n          value: priceTypes.PRODUCT,\n        },\n        {\n          text: priceTypes.PRODUCT_SET,\n          value: priceTypes.PRODUCT_SET,\n        },\n      ],\n      onFilter: (value, { type }) => type === value,\n    },\n    {\n      title: \"Категорія\",\n      dataIndex: \"category\",\n      filters: getCategoryFiletrOptions(categories),\n      onFilter: (value, { category }) => category === value,\n    },\n    {\n      title: \"Під Категорія\",\n      dataIndex: \"subcategory\",\n      filters: getCategoryFiletrOptions(subCategories),\n      onFilter: (value, { subcategory }) => subcategory === value,\n    },\n    {\n      dataIndex: \"_id\",\n      render: (id, price) => (\n        <ButtonWrapper>\n          <EditButton onClick={() => showEditPriceModal(id, price)} />\n          <DeletePriceBtn\n            refetch={refetch}\n            id={id}\n            nomenclature={price.nomenclature}\n            type={price.type}\n          />\n        </ButtonWrapper>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <ButtonWrapper>\n        <Button type=\"primary\" onClick={showAddProductForm}>\n          Додати продукт\n        </Button>\n        <Button type=\"primary\" onClick={showAddProductSetForm}>\n          Додати набір\n        </Button>\n        <ExcelExport price={[...productData, ...productSetsData]} />\n\n        <Button type=\"primary\" onClick={showUpdateProductsModal}>\n          Оновити продукти\n        </Button>\n\n        <p>Продуктів: {productData.length} шт. </p>\n        <p>Наборів: {productSetsData.length} шт. </p>\n      </ButtonWrapper>\n\n      <Table\n        columns={columnsConfig}\n        dataSource={[...productData, ...productSetsData]}\n        loading={loading}\n        rowKey=\"_id\"\n        pagination={{ showTotal: (total) => `Загальна кількість ${total} шт.` }}\n      />\n    </>\n  );\n};\n","import { Form, Input, Button, Space, InputNumber } from \"antd\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport {\n  MarkupInputItem,\n  requiredRule,\n  SubmitBtnItem,\n} from \"../../../components/Form\";\n\nexport const CategoryForm = ({ onFinish, initialValues = {} }) => {\n  return (\n    <Form\n      name=\"categoryForm\"\n      onFinish={onFinish}\n      layout={\"vertical\"}\n      initialValues={initialValues}\n    >\n      <Form.Item label=\"Назва\" name=\"name\" rules={[requiredRule]}>\n        <Input />\n      </Form.Item>\n      <MarkupInputItem />\n      <Form.List name=\"subcategories\">\n        {(fields, { add, remove }) => (\n          <>\n            {fields.map((field) => (\n              <Space key={field.key} align=\"baseline\">\n                <Form.Item\n                  noStyle\n                  shouldUpdate={(prevValues, curValues) =>\n                    prevValues.area !== curValues.area ||\n                    prevValues.sights !== curValues.sights\n                  }\n                >\n                  {() => (\n                    <Form.Item\n                      {...field}\n                      label=\"Назва\"\n                      name={[field.name, \"name\"]}\n                      fieldKey={[field.fieldKey, \"sight\"]}\n                      rules={[requiredRule]}\n                    >\n                      <Input />\n                    </Form.Item>\n                  )}\n                </Form.Item>\n                <Form.Item\n                  {...field}\n                  label=\"Націнка\"\n                  name={[field.name, \"markup\"]}\n                  fieldKey={[field.fieldKey, \"markup\"]}\n                >\n                  <InputNumber />\n                </Form.Item>\n\n                <MinusCircleOutlined onClick={() => remove(field.name)} />\n              </Space>\n            ))}\n            <Form.Item>\n              <Button\n                type=\"dashed\"\n                onClick={() => add()}\n                block\n                icon={<PlusOutlined />}\n              >\n                Додати підкатегорію\n              </Button>\n            </Form.Item>\n          </>\n        )}\n      </Form.List>\n      <SubmitBtnItem />\n    </Form>\n  );\n};\n","import * as R from \"ramda\";\nimport { v4 as uuidv4 } from \"uuid\";\n\n// isCategoryNotHaveSubcategory :: Category -> Boolean\nconst isCategoryNotHaveSubcategory = R.compose(\n  R.isNil,\n  R.prop(\"subcategories\")\n);\n\n// prepareCategory :: Function -> CategoryFormData -> SubmitCategory\nconst prepareCategory = (prepareSubcategory) =>\n  R.ifElse(\n    isCategoryNotHaveSubcategory,\n    R.dissoc(\"subcategories\"),\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.compose(\n        R.objOf(\"subcategories\"),\n        R.map(prepareSubcategory),\n        R.prop(\"subcategories\")\n      ),\n    ])\n  );\n\n// populateSubcategoryWithId :: SubcategoryFormData -> SubcategoryInput\nconst populateSubcategoryWithId = R.applySpec({\n  _id: () => uuidv4(),\n  name: R.prop(\"name\"),\n  markup: R.prop(\"markup\"),\n});\n\n// populateSubcategoryWithIdIfNeed :: SubcategoryFormData -> SubcategoryUpdate\nconst populateSubcategoryWithIdIfNeed = R.ifElse(\n  R.compose(R.isNil, R.prop(\"_id\")),\n  populateSubcategoryWithId,\n  R.identity\n);\n\n// prepareCreateCategoryBeforSubmit :: FormDataInput -> CategoryInput\nexport const prepareCreateCategoryBeforSubmit = prepareCategory(\n  populateSubcategoryWithId\n);\n\n// prepareUpdateCategoryBeforSubmit :: FormDataInput -> CategoryUpdate\nexport const prepareUpdateCategoryBeforSubmit = prepareCategory(\n  populateSubcategoryWithIdIfNeed\n);\n\n// prepareCategoryIntialValues :: CategotyData -> CategoryIntialValues\nexport const prepareCategoryIntialValues = R.compose(\n  R.unless(\n    isCategoryNotHaveSubcategory,\n    R.converge(R.mergeRight, [\n      R.identity,\n      R.compose(\n        R.objOf(\"subcategories\"),\n        R.map(R.dissoc(\"__typename\")),\n        R.prop(\"subcategories\")\n      ),\n    ])\n  ),\n  R.dissoc(\"__typename\"),\n  R.propOr({}, \"category\")\n);\n","import { useMutation, gql, useQuery } from \"@apollo/client\";\n\nimport { categoryFragment } from \"../../price/PriceTable/PriceTable\";\nimport { CategoryForm } from \"./CategoryForm\";\nimport {\n  prepareCategoryIntialValues,\n  prepareUpdateCategoryBeforSubmit,\n} from \"./utils\";\n\nconst UPDATE_CATEGORY_MUTATION = gql`\n  mutation updateCategory($updateCategoryId: ID!, $update: CategoryInput!) {\n    updateCategory(id: $updateCategoryId, update: $update) {\n      _id\n    }\n  }\n`;\n\nconst CATEGORY_QUERY = gql`\n  query category($id: ID!) {\n    category(id: $id) {\n      ...categoryFragment\n    }\n  }\n  ${categoryFragment}\n`;\n\nexport const EditCategoryForm = ({ id, closeModal, refetch }) => {\n  const { data, loading } = useQuery(CATEGORY_QUERY, {\n    variables: { id },\n    fetchPolicy: \"network-only\",\n  });\n\n  const initialValues = prepareCategoryIntialValues(data);\n\n  const [updateCategory] = useMutation(UPDATE_CATEGORY_MUTATION);\n\n  const handleSubmit = async (values) => {\n    try {\n      await updateCategory({\n        variables: {\n          updateCategoryId: id,\n          update: prepareUpdateCategoryBeforSubmit(values),\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  if (loading) return null;\n\n  return <CategoryForm onFinish={handleSubmit} initialValues={initialValues} />;\n};\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { CategoryForm } from \"./CategoryForm\";\nimport { prepareCreateCategoryBeforSubmit } from \"./utils\";\n\nconst ADD_CATEGORY_MUTATION = gql`\n  mutation createCategory($input: CategoryInput!) {\n    createCategory(input: $input) {\n      _id\n    }\n  }\n`;\n\nexport const AddCategoryForm = ({ closeModal, refetch }) => {\n  const [addCategory] = useMutation(ADD_CATEGORY_MUTATION);\n\n  const handleSubmit = async (values) => {\n    try {\n      await addCategory({\n        variables: {\n          input: prepareCreateCategoryBeforSubmit(values),\n        },\n      });\n      closeModal();\n      refetch();\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return <CategoryForm onFinish={handleSubmit} />;\n};\n","import { useMutation, gql } from \"@apollo/client\";\n\nimport { DeleteButton } from \"../../../components/Button\";\nimport { useConfirmDeleteModal } from \"../../../hook/useCinfirmModal\";\n\nconst DELETE_CATEGORY_MUTATION = gql`\n  mutation deleteCategory($categoryId: ID!) {\n    deleteCategory(id: $categoryId)\n  }\n`;\n\nexport const DeleteCategoryBtn = ({ id, categoryName, refetch }) => {\n  const [deleteCategory] = useMutation(DELETE_CATEGORY_MUTATION, {\n    variables: { categoryId: id },\n  });\n\n  const showDeleteConfirmModal = useConfirmDeleteModal(\n    categoryName,\n    deleteCategory,\n    refetch\n  );\n\n  return <DeleteButton onClick={showDeleteConfirmModal} />;\n};\n","import * as R from \"ramda\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Table, Button } from \"antd\";\n\nimport { EditCategoryForm } from \"../CategoryForm/EditCategoryForm\";\nimport { ButtonWrapper, EditButton } from \"../../../components/Button\";\nimport { AddCategoryForm } from \"../CategoryForm/AddCategoryForm\";\nimport { useModalContext } from \"../../../providers/ModalProvider\";\nimport { DeleteCategoryBtn } from \"./DeleteCategoryBtn\";\nimport { categoryFragment } from \"../../price/PriceTable/PriceTable\";\n\nexport const CATEGORIES_QUERY = gql`\n  query {\n    categories {\n      ...categoryFragment\n    }\n  }\n  ${categoryFragment}\n`;\n\n// isSubcategory :: Object -> Boolean\nconst isSubcategory = R.propEq(\"__typename\", \"Subcategory\");\n\n// prepareCategoryData :: QueryData -> [Category]\nconst prepareCategoryData = R.compose(\n  R.map(\n    R.unless(\n      R.compose(R.either(R.isNil, R.isEmpty), R.prop(\"subcategories\")),\n      R.converge(R.mergeRight, [\n        R.dissoc(\"subcategories\"),\n        R.compose(R.objOf(\"children\"), R.prop(\"subcategories\")),\n      ])\n    )\n  ),\n  R.propOr([], \"categories\")\n);\n\nexport const CategoryTable = () => {\n  const { data, loading, refetch } = useQuery(CATEGORIES_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { showModal, handleCancel } = useModalContext();\n\n  const categories = prepareCategoryData(data);\n\n  const showAddCategoryModal = () =>\n    showModal({\n      title: \"Додати нову категорію\",\n      content: () => (\n        <AddCategoryForm closeModal={handleCancel} refetch={refetch} />\n      ),\n    });\n\n  const showEditCategoryModal = (id, categoryName) =>\n    showModal({\n      title: `Редагувати категорію ${categoryName}`,\n      content: () => (\n        <EditCategoryForm closeModal={handleCancel} refetch={refetch} id={id} />\n      ),\n    });\n\n  const columnsConfig = [\n    {\n      title: \"Назва\",\n      dataIndex: \"name\",\n    },\n    {\n      title: \"Націнка\",\n      dataIndex: \"markup\",\n    },\n    {\n      dataIndex: \"_id\",\n      render: (id, category) =>\n        isSubcategory(category) ? null : (\n          <ButtonWrapper>\n            <EditButton\n              onClick={() => showEditCategoryModal(id, category.name)}\n            />\n            <DeleteCategoryBtn\n              refetch={refetch}\n              id={id}\n              categoryName={category.name}\n            />\n          </ButtonWrapper>\n        ),\n    },\n  ];\n\n  return (\n    <>\n      <ButtonWrapper>\n        <Button type=\"primary\" onClick={showAddCategoryModal}>\n          Додати категорію\n        </Button>\n      </ButtonWrapper>\n\n      <Table\n        columns={columnsConfig}\n        dataSource={categories}\n        loading={loading}\n        rowKey=\"_id\"\n        pagination={false}\n      />\n    </>\n  );\n};\n","import * as R from \"ramda\";\nimport { Form, Input, Button } from \"antd\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport { useNavigate } from \"react-router\";\nimport { routes } from \"../../routes/config\";\n\nexport const LOGIN_MUTATION = gql`\n  mutation LOGIN_MUTATION($input: LoginInput!) {\n    login(input: $input) {\n      token\n    }\n  }\n`;\n\nexport const LoginForm = () => {\n  const [login] = useMutation(LOGIN_MUTATION);\n  const navigate = useNavigate();\n\n  const onFinish = async (values) => {\n    try {\n      const response = await login({\n        variables: {\n          input: values,\n        },\n      });\n\n      const token = R.pathOr(\"\", [\"data\", \"login\", \"token\"], response);\n      localStorage.setItem(\"token\", token);\n\n      setTimeout(() => navigate(routes.home), 500);\n    } catch (e) {\n      alert(e);\n    }\n  };\n\n  return (\n    <Form\n      name=\"basic\"\n      labelCol={{\n        span: 8,\n      }}\n      wrapperCol={{\n        span: 16,\n      }}\n      initialValues={{\n        remember: true,\n      }}\n      onFinish={onFinish}\n      autoComplete=\"off\"\n    >\n      <Form.Item\n        label=\"Користувач\"\n        name=\"username\"\n        rules={[\n          {\n            required: true,\n            message: \"Ім'я користувача обов'язкове!\",\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Пароль\"\n        name=\"password\"\n        rules={[\n          {\n            required: true,\n            message: \"Пароль обов'язковий!\",\n          },\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        wrapperCol={{\n          offset: 8,\n          span: 16,\n        }}\n      >\n        <Button type=\"primary\" htmlType=\"submit\">\n          Увійти\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n","import styled from \"styled-components\";\nimport { LoginForm } from \"./LoginForm\";\n\nconst Wrapper = styled.div`\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const LoginPage = () => {\n  return (\n    <Wrapper>\n      <LoginForm />\n    </Wrapper>\n  );\n};\n","import { LoginLayout, EmptyLayout } from \"../components/Layouts\";\nimport { MainLayout } from \"../components/MainLayout\";\nimport { CategoryPage } from \"../pages/category/CategoryPage\";\nimport { LoginPage } from \"../pages/login/LoginPage\";\nimport { PricePage } from \"../pages/price/PricePage\";\nimport { PublicPricePage } from \"../pages/price/PublicPricePage\";\n\nexport const routes = {\n  home: \"/\",\n  category: \"/category\",\n  login: \"/login\",\n  price: \"/price\",\n};\n\nexport const routesConfig = [\n  {\n    Layout: MainLayout,\n    rootPath: routes.home,\n    routes: [\n      {\n        path: routes.home,\n        Component: PricePage,\n      },\n      {\n        path: routes.category,\n        Component: CategoryPage,\n      },\n    ],\n  },\n  {\n    Layout: LoginLayout,\n    rootPath: routes.login,\n    routes: [\n      {\n        index: true,\n        path: routes.login,\n        Component: LoginPage,\n      },\n    ],\n  },\n  {\n    Layout: EmptyLayout,\n    rootPath: routes.price,\n    routes: [\n      {\n        index: true,\n        path: routes.price,\n        Component: PublicPricePage,\n      },\n    ],\n  },\n];\n","import { PriceTable } from \"./PriceTable/PriceTable\";\n\nexport const PricePage = () => <PriceTable />;\n","import { CategoryTable } from \"./CategoryTable/CategoryTable\";\n\nexport const CategoryPage = () => <CategoryTable />;\n","import { useQuery } from \"@apollo/client\";\nimport { Table } from \"antd\";\nimport { ButtonWrapper } from \"../../components/Button\";\n\nimport { ExcelExportPublick } from \"./PriceTable/ExcelExport\";\nimport { CATEGORY_QUERY, PRODUCTS_QUERY } from \"./PriceTable/PriceTable\";\nimport {\n  preparepProductData,\n  preparedProductSetData,\n  getCategoriesOptions,\n  getCategoryFiletrOptions,\n} from \"./PriceTable/priceTableUtils\";\n\nimport { priceTypes } from \"./PriceTable/priceTypes\";\nimport { getColumnSearchProps } from \"./PriceTable/textFilter\";\n\nexport const PublicPricePage = () => {\n  const { data, loading } = useQuery(PRODUCTS_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { data: categoriesData } = useQuery(CATEGORY_QUERY, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const { categories, subCategories } = getCategoriesOptions(categoriesData);\n\n  const productData = preparepProductData(data);\n  const productSetsData = preparedProductSetData(data);\n\n  const columnsConfig = [\n    {\n      title: \"Номенклатура\",\n      dataIndex: \"nomenclature\",\n      ...getColumnSearchProps(\"nomenclature\"),\n    },\n    {\n      title: \"Артикул\",\n      dataIndex: \"article\",\n      ...getColumnSearchProps(\"article\"),\n    },\n    {\n      title: \"Залишок\",\n      dataIndex: \"count\",\n      sorter: (a, b) => b.count - a.count,\n    },\n    {\n      title: \"Закупка дроп\",\n      dataIndex: \"dropPrice\",\n      sorter: (a, b) => b.dropPrice - a.dropPrice,\n    },\n    {\n      title: \"Продаж\",\n      dataIndex: \"sellingPrice\",\n      sorter: (a, b) => b.sellingPrice - a.sellingPrice,\n    },\n    {\n      title: \"Опт\",\n      dataIndex: \"wholesalePrice\",\n      sorter: (a, b) => b.wholesalePrice - a.wholesalePrice,\n    },\n    {\n      title: \"Тип\",\n      dataIndex: \"type\",\n      filters: [\n        {\n          text: priceTypes.PRODUCT,\n          value: priceTypes.PRODUCT,\n        },\n        {\n          text: priceTypes.PRODUCT_SET,\n          value: priceTypes.PRODUCT_SET,\n        },\n      ],\n      onFilter: (value, { type }) => type === value,\n    },\n    {\n      title: \"Категорія\",\n      dataIndex: \"category\",\n      filters: getCategoryFiletrOptions(categories),\n      onFilter: (value, { category }) => category === value,\n    },\n    {\n      title: \"Під Категорія\",\n      dataIndex: \"subcategory\",\n      filters: getCategoryFiletrOptions(subCategories),\n      onFilter: (value, { subcategory }) => subcategory === value,\n    },\n  ];\n\n  return (\n    <>\n      <ButtonWrapper>\n        <ExcelExportPublick price={[...productData, ...productSetsData]} />\n      </ButtonWrapper>\n\n      <Table\n        columns={columnsConfig}\n        dataSource={[...productData, ...productSetsData]}\n        loading={loading}\n        rowKey=\"_id\"\n      />\n    </>\n  );\n};\n","import { Routes, Route } from \"react-router-dom\";\nimport { routesConfig } from \"./config\";\n\nexport const AppRouter = () => {\n  return (\n    <Routes>\n      {routesConfig.map(({ routes, rootPath, Layout }) => (\n        <Route key={rootPath} path={rootPath} element={<Layout />}>\n          {routes.map(({ path, index, Component }) => (\n            <Route\n              index={index}\n              key={path}\n              path={path}\n              element={<Component />}\n            />\n          ))}\n        </Route>\n      ))}\n    </Routes>\n  );\n};\n","import { ApolloClientProvider } from \"./providers/ApolloClientProvider\";\n\nimport \"./App.css\";\nimport { ModalProvider } from \"./providers/ModalProvider\";\nimport { AppRouter } from \"./routes/AppRouter\";\nimport { UserProvider } from \"./providers/UserProvider\";\n\nexport const App = () => (\n  <ApolloClientProvider>\n    <UserProvider>\n      <ModalProvider>\n        <AppRouter />\n      </ModalProvider>\n    </UserProvider>\n  </ApolloClientProvider>\n);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}